<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[require 'mind']]></title>
  <link href="http://requiremind.com/atom.xml" rel="self"/>
  <link href="http://requiremind.com/"/>
  <updated>2015-01-04T21:01:17+01:00</updated>
  <id>http://requiremind.com/</id>
  <author>
    <name><![CDATA[requireMind]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Memoization, speed up your javascript performance]]></title>
    <link href="http://requiremind.com/memoization-speed-up-your-javascript-performance"/>
    <updated>2015-01-03T16:42:00+01:00</updated>
    <id>http://requiremind.com/memoization-speed-up-your-javascript-performance</id>
    <content type="html"><![CDATA[<p>Now that web apps and websites are getting bigger and bigger, performances have become a really important point to focus on. This article will introduce you the concept of <code>memoization</code> that will allow you to improve your functions performances through some cache mechanisms.</p>

<p>Fasten your seatbelt, I&rsquo;m starting the engine!</p>

<!-- more -->


<p><img class="center" src="http://requiremind.com/images/memoize/turing.jpg" title="turing" alt="turing"></p>

<h3>Introduction</h3>

<p>Memoization is a simple mechanism that consist in caching the result of computed values. This allows the next function call, done with the same parameters, to hit the cache rather than re-computing this values.<br/>
The cache is indexed by the input arguments. If the arguments exist in the cache, then the cached value is returned. Otherwise, the function is executed and the newly computed value is added to the cache.</p>

<p>Let&rsquo;s see a basic example.</p>

<h3>Basic example</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">speedAlert</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">speed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">limitation</span> <span class="o">=</span> <span class="mi">75</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// Imagine the following line being an extra CPU intensive task</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">speed</span> <span class="o">&gt;</span> <span class="nx">limitation</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">radar</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// some properties and functions</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">radar</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;carDetected&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">car</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// The following function can then be called many times</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">speedAlert</span><span class="p">(</span><span class="nx">car</span><span class="p">.</span><span class="nx">speed</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">radar</span><span class="p">.</span><span class="nx">triggerFlash</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the method <code>speedAlert</code> will be called many times. Imagine that inside this method there is a lot of computing going on (not just this basic operation :) ). So everytime we call it, we&rsquo;re going to use a lot of CPU time.</p>

<p>This is where <code>memoization</code> enter! Let&rsquo;s refactor the speedAlert method then.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">speedAlert</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">cache</span>      <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">limitation</span> <span class="o">=</span> <span class="mi">75</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">speed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">speed</span> <span class="k">in</span> <span class="nx">cache</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hit cache&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">cache</span><span class="p">[</span><span class="nx">speed</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Not in the cache, so compute the value and put it in the cache</span>
</span><span class='line'>    <span class="nx">cache</span><span class="p">[</span><span class="nx">speed</span><span class="p">]</span> <span class="o">=</span> <span class="nx">speed</span> <span class="o">&gt;</span> <span class="nx">limitation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">cache</span><span class="p">[</span><span class="nx">speed</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">f</span><span class="p">;</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Now let&#39;s call this method manually</span>
</span><span class='line'><span class="nx">speedAlert</span><span class="p">(</span><span class="mi">90</span><span class="p">);</span> <span class="c1">// return true</span>
</span><span class='line'><span class="nx">speedAlert</span><span class="p">(</span><span class="mi">70</span><span class="p">);</span> <span class="c1">// return false</span>
</span><span class='line'><span class="nx">speedAlert</span><span class="p">(</span><span class="mi">90</span><span class="p">);</span> <span class="c1">// hit cache + return true</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the last line of the previous example, you can see that the computation hasn&rsquo;t been made. The code has fetch the value from the cache and returned it.
This is the process of memoization.
When this method is called, it will look inside his cache to see if it had already compute the value for this <code>speed</code> parameter and return it, or compute the value and push it into the cache.</p>

<p>So now, everytime this method is called with the same argument, it won&rsquo;t compute nothing and this is a large amount of time earned.</p>

<p>I want to point out that here the <code>limitation</code> variable (75) is stored inside the function. This is an important fact to notice. Indeed, if this value was global or outside this function, we wouldn&rsquo;t be able to memoize <code>speedAlert</code> because then, his result would be influenced by some external properties and won&rsquo;t depends only on his inputs.</p>

<p>Here is a quick example of what I just said:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">limitation</span> <span class="o">=</span> <span class="mi">75</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">speedAlert</span> <span class="o">=</span> <span class="c1">// same definition as before except the limitation assignation has been moved outside</span>
</span><span class='line'>
</span><span class='line'><span class="nx">speedAlert</span><span class="p">(</span><span class="mi">70</span><span class="p">);</span> <span class="c1">// return false</span>
</span><span class='line'><span class="nx">speedAlert</span><span class="p">(</span><span class="mi">70</span><span class="p">);</span> <span class="c1">// hit cache + return false</span>
</span><span class='line'><span class="nx">limitation</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
</span><span class='line'><span class="nx">speedAlert</span><span class="p">(</span><span class="mi">70</span><span class="p">);</span> <span class="c1">// hit cache + return false /!\ it should be true</span>
</span></code></pre></td></tr></table></div></figure>


<p>You see, the result is already cached for the input <code>70</code>, so it doesn&rsquo;t care about the limitation change as it will never trigger the computation again.
It&rsquo;s important to understand that only the functions from which the result is influenced by the input are able to be memoized. This mean functions that always respect this: <code>f(x) === f(x)</code></p>

<h3>Advanced usage</h3>

<p>We saw memoization on a basic example with only a single argument. But this process can also handles multiple arguments. Plus, we were doing the <code>memoization</code> implementation inside the function but we can write a memoize function that will take a function as a parameter. This way, we can apply memoization to any functions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">memoize</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">resolver</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">memoized</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">resolver</span>  <span class="o">=</span> <span class="nx">resolver</span> <span class="o">||</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">cache</span> <span class="o">=</span> <span class="nx">memoized</span><span class="p">.</span><span class="nx">cache</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">args</span>  <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">key</span>   <span class="o">=</span> <span class="nx">resolver</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">key</span> <span class="k">in</span> <span class="nx">cache</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hit cache&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">cache</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">cache</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// This could have been done with this one-liner too ;)</span>
</span><span class='line'>    <span class="c1">// return (key in cache) ? cache[key] : (cache[key] = fn.apply(this, arguments));</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">memoized</span><span class="p">.</span><span class="nx">cache</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">memoized</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Time for explanations, the <code>memoize</code> function takes two parameters, a function (the one we want to memoize) and an <em>optional</em> resolver.</p>

<p>Now that our <code>memoize</code> is more &lsquo;abstract&rsquo;, we can have multiple arguments passed to our function. So the <code>key</code> for the <code>cache</code> can&rsquo;t be as simple as the first argument anymore. That&rsquo;s why we&rsquo;re asking for a resolver. His goal is to take the <code>arguments</code> and compute a key for it.</p>

<p><em>Note: In the previous example, we&rsquo;re using <code>JSON.stringify</code> as a <code>resolver</code>, but this one is not a bullet-proof solution as it won&rsquo;t work with all cases, plus, keep in mind that <code>key in cache</code> syntax is definitely not optimzed but allows this example to stay clear and light.<br/>
That&rsquo;s why the cache management here is really basic. A way to start optimizing it could be by using a <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/WeakMap">weak map</a> rather than an object (cool feature coming in ES6)</em></p>

<p>Time has come to play with it!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">speedAlert</span> <span class="o">=</span> <span class="nx">memoize</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">speed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">limitation</span> <span class="o">=</span> <span class="mi">75</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// Imagine the following line being an extra CPU intensive task</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">speed</span> <span class="o">&gt;</span> <span class="nx">limitation</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">speedAlert</span><span class="p">(</span><span class="mi">50</span><span class="p">);</span> <span class="c1">// return false</span>
</span><span class='line'><span class="nx">speedAlert</span><span class="p">(</span><span class="mi">50</span><span class="p">);</span> <span class="c1">// hit cache + return false</span>
</span><span class='line'><span class="nx">speedAlert</span><span class="p">(</span><span class="mi">90</span><span class="p">);</span> <span class="c1">// return true</span>
</span><span class='line'><span class="nx">speedAlert</span><span class="p">(</span><span class="mi">90</span><span class="p">);</span> <span class="c1">// hit cache + return true</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now, our <code>speedAlert</code> method is a normal function declaration and the memoize wrapper handles all the memoization process for us. That is pretty neat.</p>

<p>That&rsquo;s it for this article I hope you..</p>

<blockquote><p>Don&rsquo;t stop here! How could I see that it improve my performance.</p></blockquote>

<p>Ok ok, let&rsquo;s make a quick test with the well known <a href="http://en.wikipedia.org/wiki/Fibonacci_number">Fibonnaci sequence</a>. This function is really adapted to this example as it has a lot of recursive calls and regularly compute the same values.
We&rsquo;re going to use some nice functions called <code>console.time</code> and <code>console.timeEnd</code> that give us the ability to easily track the time in our console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">fibonacci</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="nx">n</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">n</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="o">?</span> <span class="nx">n</span> <span class="o">:</span> <span class="nx">fibonacci</span><span class="p">(</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nx">fibonacci</span><span class="p">(</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">fibMemoize</span> <span class="o">=</span> <span class="nx">memoize</span><span class="p">(</span><span class="nx">fibonacci</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">iterations</span> <span class="o">=</span> <span class="mi">35</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">time</span><span class="p">(</span><span class="s1">&#39;non-memoized&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fibMemoize</span><span class="p">(</span><span class="nx">iterations</span><span class="p">));</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">timeEnd</span><span class="p">(</span><span class="s1">&#39;non-memoized&#39;</span><span class="p">);</span> <span class="c1">// log 195.896ms</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Now this call is memoized, so it&#39;s just going to hit the cache</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">time</span><span class="p">(</span><span class="s1">&#39;memoized&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fibMemoize</span><span class="p">(</span><span class="nx">iterations</span><span class="p">));</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">timeEnd</span><span class="p">(</span><span class="s1">&#39;memoized&#39;</span><span class="p">);</span> <span class="c1">// log 0.193ms</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you&rsquo;re going to see that, the more you increment the <code>iterations</code> variable, the more the utility of the <code>memoize</code> function is important! <em>(but don&rsquo;t push it too far, I&rsquo;ve managed to freeze Chrome with a 75 value..)</em></p>

<p>So, for all your CPU intensive tasks, think about implementing some memoize mechanism.<br/>
But don&rsquo;t forget some of the downsides.</p>

<p>You can&rsquo;t use it on a function that doesn&rsquo;t return the same result for the same input. It&rsquo;s not adapted to fast executing functions or not often called ones. Plus, the cache management have to be improved for heavy usages with some notion of retention and so on.</p>

<p>Don&rsquo;t hesitate to share your opinion in the comments.</p>

<p>If you want to discover more about Javascript, you can have a look to this <a href="http://requiremind.com/categories/learn-js">serie of articles</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Currying, spice up your javascript functions]]></title>
    <link href="http://requiremind.com/currying-spice-up-your-javascript-functions"/>
    <updated>2015-01-02T14:41:00+01:00</updated>
    <id>http://requiremind.com/currying-spice-up-your-javascript-functions</id>
    <content type="html"><![CDATA[<p>Currying is an interesting technique that will power up your functions usage. In this article we&rsquo;re going to explain it from basic example to some more advanced use cases and you&rsquo;ll see that knowing this pattern, will give you some extra power as a developer.</p>

<p>It&rsquo;s time to cook, let&rsquo;s spice it up!</p>

<!-- more -->


<p><img class="center" src="http://requiremind.com/images/currying/spices.png" title="spices" alt="spices"></p>

<h3>Definition</h3>

<p>To begin, a definition won&rsquo;t hurt.</p>

<p>Currying is a process which allows you to bind some arguments to a function so that, by the next invocation, these values are already fixed. It&rsquo;s oftenly referred as &lsquo;partial functions&rsquo;. You can see it as a way to prefilled some of the arguments to obtain a more specific function.</p>

<p>But, enough talking it&rsquo;s time for a basic code example!</p>

<h3>Basic example</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">liker</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="s1">&#39;I like this &#39;</span> <span class="o">+</span> <span class="nx">type</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">bookLiker</span> <span class="o">=</span> <span class="nx">liker</span><span class="p">(</span><span class="s1">&#39;book&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">bookLiker</span><span class="p">(</span><span class="s1">&#39;Oro&#39;</span><span class="p">);</span>  <span class="c1">// I like this book: Oro</span>
</span><span class='line'><span class="nx">bookLiker</span><span class="p">(</span><span class="s1">&#39;Wild: A journey from lost to found&#39;</span><span class="p">);</span> <span class="c1">// I like this book: Wild: A journey from lost to found</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">tedLiker</span> <span class="o">=</span> <span class="nx">liker</span><span class="p">(</span><span class="s1">&#39;TED talk&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">tedLiker</span><span class="p">(</span><span class="s1">&#39;The art of misdirection&#39;</span><span class="p">);</span> <span class="c1">// I like this TED talk: The art of misdirection</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now it should be more clear for you. The <code>liker</code> is a <em>curried function</em>. As you can see, we use it to <em>prefill</em> the first argument before the final function is executed.
This allows us to create more specific likers function as <em>bookLiker</em> or <em>tedTalkLiker</em> in our case.</p>

<p>It was the most basic example to introduce you with this concept, so it&rsquo;s now time to move forward.</p>

<h3>Advanced usage</h3>

<p>We can write a curry helper function that is going to transform any &ldquo;<em>standard</em>&rdquo; function into a curried one.
We&rsquo;ll move from step to step on the implementation, so that you can absorb more easily the process.</p>

<p>So, let&rsquo;s start with the first one.</p>

<h4>1 &ndash; A naive implementation</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">naiveCurry</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span>
</span><span class='line'>          <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">))</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s have a look.
First, it stores the arguments passed to our function in a <code>args</code> property. Except for the first argument (the function we want to curry).
It then returns a function. When you then call this function, the old arguments (stored in the <code>args</code> property) are concatenated with the new arguments received and applied to the curried function <code>fn</code>.</p>

<p><em>For those who didn&rsquo;t know, <code>arguments</code> is a specific word in Javascript and it corresponds to the arguments passed as parameters (even if they are not specified in the function signature). This <code>arguments</code> variable behaves like an <code>Array</code> but it&rsquo;s not from an <code>Array</code> type, that&rsquo;s why you&rsquo;re seeing those <code>Array.prototype</code> calls.</em></p>

<p>To illustrated it, a use case can be a <code>sendMessage</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">sendMessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">from</span><span class="p">,</span> <span class="nx">to</span><span class="p">,</span> <span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;@&#39;</span> <span class="o">+</span> <span class="nx">to</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span> <span class="o">+</span> <span class="nx">text</span> <span class="o">+</span> <span class="s1">&#39; - &#39;</span> <span class="o">+</span> <span class="nx">from</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// return &quot;@Irene Adler: Stop boring me and think. It&#39;s the new sexy - Sherlock Holmes&quot;</span>
</span><span class='line'><span class="nx">sendMessage</span><span class="p">(</span><span class="s1">&#39;Sherlock Holmes&#39;</span><span class="p">,</span> <span class="s1">&#39;Irene Adler&#39;</span><span class="p">,</span> <span class="s1">&#39;Stop boring me and think. It\&#39;s the new sexy.&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">naiveCurry</span><span class="p">(</span><span class="nx">sendMessage</span><span class="p">,</span> <span class="s1">&#39;SH&#39;</span><span class="p">)(</span><span class="s1">&#39;IA&#39;</span><span class="p">,</span> <span class="s1">&#39;Stop boring me and think. It\&#39;s the new sexy.&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">naiveCurry</span><span class="p">(</span><span class="nx">sendMessage</span><span class="p">,</span> <span class="s1">&#39;SH&#39;</span><span class="p">,</span> <span class="s1">&#39;IA&#39;</span><span class="p">)(</span><span class="s1">&#39;Stop boring me and think. It\&#39;s the new sexy.&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">sendMessageFromSherlock</span> <span class="o">=</span> <span class="nx">naiveCurry</span><span class="p">(</span><span class="nx">sendMessage</span><span class="p">,</span> <span class="s1">&#39;SH&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">sendMessageFromSherlock</span><span class="p">(</span><span class="s1">&#39;IA&#39;</span><span class="p">,</span> <span class="s1">&#39;Stop boring me and think. It\&#39;s the new sexy.&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well that&rsquo;s fine, but as you can see the implementation is quite naive and can&rsquo;t resolve all the currying case, but we&rsquo;re getting closer to the final syntax.</p>

<h4>2 &ndash; A better implementation</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">curry</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Give us the function&#39;s arity (number of arguments)</span>
</span><span class='line'>    <span class="nx">length</span> <span class="o">=</span> <span class="nx">length</span> <span class="o">||</span><span class="err"> </span><span class="nx">fn</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">allArgumentsSpecified</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="nx">length</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// We have all arguments, we can apply them to the function</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">allArgumentsSpecified</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// We&#39;re missing some arguments, so we keep currying</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">partial</span> <span class="o">=</span> <span class="p">[</span><span class="nx">fn</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">curry</span><span class="p">(</span><span class="nx">naiveCurry</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">partial</span><span class="p">),</span> <span class="nx">length</span> <span class="o">-</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the magic is on! This curry implementation is now way more robust.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">sendMessageCurried</span> <span class="o">=</span> <span class="nx">curry</span><span class="p">(</span><span class="nx">sendMessage</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sendMessageCurried</span><span class="p">(</span><span class="s1">&#39;Sherlock&#39;</span><span class="p">,</span> <span class="s1">&#39;Watson&#39;</span><span class="p">,</span> <span class="s1">&#39;You see, but you do not observe&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">sendMessageCurried</span><span class="p">(</span><span class="s1">&#39;Sherlock&#39;</span><span class="p">)(</span><span class="s1">&#39;Watson&#39;</span><span class="p">,</span> <span class="s1">&#39;You see, but you do not observe&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">sendMessageCurried</span><span class="p">(</span><span class="s1">&#39;Sherlock&#39;</span><span class="p">,</span> <span class="s1">&#39;Watson&#39;</span><span class="p">)(</span><span class="s1">&#39;You see, but you do not observe&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">sendMessageCurried</span><span class="p">(</span><span class="s1">&#39;Sherlock&#39;</span><span class="p">)(</span><span class="s1">&#39;Watson&#39;</span><span class="p">)(</span><span class="s1">&#39;You see, but you do not observe&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">fromSherlocktoWatson</span> <span class="o">=</span> <span class="nx">sendMessageCurried</span><span class="p">(</span><span class="s1">&#39;Sherlock&#39;</span><span class="p">,</span> <span class="s1">&#39;Watson&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">fromSherlocktoWatson</span><span class="p">(</span><span class="s1">&#39;You see, but you do not observe&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wohohoh! We&rsquo;ve made it! And as you can see, it can be quite useful to have this syntax available. Furthermore, a major advantage is that the curried function is totally transparent as it still can behave as a normal one (<em>look at the third line on this example, we can call it in a &lsquo;normal&rsquo; way</em>).</p>

<p>And we&rsquo;re done! I hope you liked it.</p>

<blockquote><p>No. You can go further!</p></blockquote>

<p>Wait, <strong>what</strong>? Isn&rsquo;t that enough? You&rsquo;re not impressed yet?<br/>
Ok ok, it&rsquo;s only because I like you, nice reader, (and because you&rsquo;ve managed to read it so far), that we&rsquo;re going to improve this function.</p>

<h4>3 &ndash; The spiciest curry function</h4>

<p>I hope you&rsquo;re ready because this is going to be tastier than a <a href="http://en.wikipedia.org/wiki/Bhut_Jolokia">ghost pepper</a> (a pepper 900.5 times hotter than a Tabasco sauce according to wikipedia!).</p>

<p><img class="center" src="http://requiremind.com/images/currying/ghost-pepper.jpg" title="ghost pepper" alt="ghost pepper"></p>

<p>For this last example I&rsquo;m using the <code>_</code> notation to refer to an &lsquo;empty&rsquo; or a &lsquo;placeholder&rsquo; variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">_</span> <span class="o">=</span> <span class="p">{};</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Attention, this could enter in conflict if you&rsquo;re using a library as <a href="https://lodash.com">lo-dash</a>. So, to avoid this conflict you can easily replace the <code>_</code> variable on the following examples with the keyword <code>undefined</code>. Also, if you need one of your parameters to be equal to <code>{}</code>, this code won&rsquo;t work. So going with <code>undefined</code> is a way more bullet-proof solution. But the <code>_</code> notation is more simple to read.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">curry</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">length</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="nx">holes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">length</span> <span class="o">=</span> <span class="nx">length</span> <span class="o">||</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">args</span>   <span class="o">=</span> <span class="nx">args</span>   <span class="o">||</span> <span class="p">[];</span>
</span><span class='line'>    <span class="nx">holes</span>  <span class="o">=</span> <span class="nx">holes</span>  <span class="o">||</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">_args</span>       <span class="o">=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">slice</span><span class="p">(),</span>
</span><span class='line'>            <span class="nx">_holes</span>      <span class="o">=</span> <span class="nx">holes</span><span class="p">.</span><span class="nx">slice</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Store the length of the args and holes received</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">argLength</span>   <span class="o">=</span> <span class="nx">_args</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">holeLength</span>  <span class="o">=</span> <span class="nx">_holes</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">allArgumentsSpecified</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Loop vars</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">arg</span>     <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">i</span>       <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">aLength</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="p">(;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">aLength</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">arg</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">arg</span> <span class="o">===</span> <span class="nx">_</span> <span class="o">&amp;&amp;</span> <span class="nx">holeLength</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">holeLength</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">_holes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">_holes</span><span class="p">.</span><span class="nx">shift</span><span class="p">());</span> <span class="c1">// first hole became the last one</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">arg</span> <span class="o">===</span> <span class="nx">_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">_holes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">argLength</span> <span class="o">+</span> <span class="nx">i</span><span class="p">);</span> <span class="c1">// stores the hole&#39;s position</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">holeLength</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// is there a hole available?</span>
</span><span class='line'>                <span class="nx">holeLength</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">_args</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">_holes</span><span class="p">.</span><span class="nx">shift</span><span class="p">(),</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">arg</span><span class="p">);</span> <span class="c1">// insert arg into the args list at the hole&#39;s index</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">// just an arg with no hole to fill, add him to the args list</span>
</span><span class='line'>                <span class="nx">_args</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arg</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">allArgumentsSpecified</span> <span class="o">=</span> <span class="p">(</span><span class="nx">_args</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="nx">length</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">allArgumentsSpecified</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">_args</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// keep currying</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">curry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="nx">length</span><span class="p">,</span> <span class="nx">_args</span><span class="p">,</span> <span class="nx">_holes</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is it! The implementation is really different from our initial naive implementation. Because here we have to handle the <code>holes</code> and manage our <code>args</code> differently.
Basically, the main difference here is the <code>for</code> loop. We just keep references to our arguments <code>holes</code> and we use them to build our <code>args</code> correctly.
This is more complex but now the usages are really interesting.</p>

<p>Let&rsquo;s have a look:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// #1 - rgbCreator</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">rgbCreator</span> <span class="o">=</span> <span class="nx">curry</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">red</span><span class="p">,</span> <span class="nx">green</span><span class="p">,</span> <span class="nx">blue</span><span class="p">,</span> <span class="nx">alpha</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;rgba(&#39;</span> <span class="o">+</span> <span class="nx">red</span> <span class="o">+</span> <span class="s1">&#39;, &#39;</span> <span class="o">+</span> <span class="nx">green</span> <span class="o">+</span> <span class="s1">&#39;, &#39;</span> <span class="o">+</span> <span class="nx">blue</span> <span class="o">+</span> <span class="s1">&#39;, &#39;</span> <span class="o">+</span> <span class="nx">alpha</span> <span class="o">+</span> <span class="s1">&#39;);&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// prints &quot;rgba(204, 160, 29, 0.9);&quot;</span>
</span><span class='line'><span class="nx">rgbCreator</span><span class="p">(</span><span class="mi">204</span><span class="p">,</span> <span class="mi">160</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="p">.</span><span class="mi">9</span><span class="p">);</span>
</span><span class='line'><span class="nx">rgbCreator</span><span class="p">(</span><span class="mi">204</span><span class="p">)(</span><span class="mi">160</span><span class="p">)(</span><span class="mi">29</span><span class="p">)(.</span><span class="mi">9</span><span class="p">);</span>
</span><span class='line'><span class="nx">rgbCreator</span><span class="p">(</span><span class="mi">204</span><span class="p">,</span> <span class="mi">160</span><span class="p">)(</span><span class="mi">29</span><span class="p">)(.</span><span class="mi">9</span><span class="p">);</span>
</span><span class='line'><span class="nx">rgbCreator</span><span class="p">(</span><span class="mi">204</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="p">.</span><span class="mi">9</span><span class="p">)(</span><span class="mi">160</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// prints &quot;rgba(204, 160, 29, 0.5);&quot;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">halfOpacity</span> <span class="o">=</span> <span class="nx">rgbCreator</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="p">.</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="nx">halfOpacity</span><span class="p">(</span><span class="mi">204</span><span class="p">,</span> <span class="mi">160</span><span class="p">,</span> <span class="mi">29</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">shadeOfGrey</span> <span class="o">=</span> <span class="nx">rgbCreator</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">_</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">opacity</span>  <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">shades</span>   <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="k">for</span><span class="p">(;</span> <span class="nx">opacity</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">opacity</span> <span class="o">+=</span> <span class="mf">0.1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">shades</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">shadeOfGrey</span><span class="p">(</span><span class="nx">opacity</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">shades</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// #2 - bind functions</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">logger</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Event occured!&#39;</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We&#39;re expecting 3 arguments. It&#39;s due to the fact that document.addEventListener is a native function.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bindEvent</span>     <span class="o">=</span> <span class="nx">curry</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">,</span> <span class="mi">3</span><span class="p">)(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bindClick</span>     <span class="o">=</span> <span class="nx">bindEvent</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">_</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bindMouseMove</span> <span class="o">=</span> <span class="nx">bindEvent</span><span class="p">(</span><span class="s1">&#39;mousemove&#39;</span><span class="p">,</span> <span class="nx">_</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">bindClick</span><span class="p">(</span><span class="nx">logger</span><span class="p">);</span>
</span><span class='line'><span class="nx">bindMouseMove</span><span class="p">(</span><span class="nx">logger</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I kept the examples simple so that you easily understand the concept. If you run the second one in your console, you&rsquo;ll see that it&rsquo;s logging everytime you move/click with your mouse.</p>

<p>Voilà, you reached the end of this article! To go further you can even try to refactor and then add the <code>curry</code> function to the <code>Function.prototype</code> itself.<br/>
I hope you&rsquo;ve learn something new here and that you&rsquo;re going to use it on your own projects. Feel free to write any comments.</p>

<p>If you want to discover more about Javascript, you can have a look to this <a href="http://requiremind.com/categories/learn-js">serie of articles</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git bisect your bug hunting best friend]]></title>
    <link href="http://requiremind.com/git-bisect-your-bug-hunting-best-friend"/>
    <updated>2014-04-07T01:23:00+02:00</updated>
    <id>http://requiremind.com/git-bisect-your-bug-hunting-best-friend</id>
    <content type="html"><![CDATA[<p>Are you a bug hunter? Are you desperately trying to find where a bug was introduced in your long git history? If the answer is yes, you&rsquo;re going to be happy to meet <a href="http://git-scm.com/book/en/git-Tools-Debugging-with-git">git bisect</a></p>

<!-- more -->


<p><img class="center" src="http://requiremind.com/images/gitbisect/bug.jpg" title="bug" alt="bug"></p>

<h3>What is it?</h3>

<p><code>git bisect</code> is installed by default with git. There is no tools or extra things to install.</p>

<p><code>bisect</code> command is performing a <a href="http://en.wikipedia.org/wiki/Binary_search_algorithm">binary search</a> between a commit in which everything was working as expected and one in which a bug was present until it finds the responsible.</p>

<h3>When should I use it?</h3>

<p>Whenever you need to find whe(n|re) a bug was introduced.<br/>
Let&rsquo;s assume that your working on a big project with a lot of developers on it. You&rsquo;re using git on a daily basis and some day someone report you that a functionality is broken.
(Obviously this can&rsquo;t happened in reality because you have a good testing strategy implemented, don&rsquo;t you? ;) ).
So you don&rsquo;t really know when the application stopped working as expected.</p>

<p>So you need to know which specific commit is guilty (and furthermore which developer is to blame!)</p>

<p>This is where <code>git bisect</code> <strong>kicks in</strong>!</p>

<h3>Usage</h3>

<p>We&rsquo;re going to review how to use it in a standard use case.
For this example, I have create a <a href="https://github.com/requiremind/git-bisect-demo">git repository</a></p>

<p>You can clone it on your computer using:</p>

<pre><code>git clone https://github.com/requiremind/git-bisect-demo.git
</code></pre>

<p>and/or simply follow this tutorial.</p>

<p>So, I have created a webpage (<code>index.html</code>)</p>

<p><img class="center" src="http://requiremind.com/images/gitbisect/tuto-git-bisect.png" title="tuto 1" alt="tuto 1"></p>

<p>and as you can see there is a <span style="background:#d9534f; color:white; padding-left:7px;padding-right:7px;">wrong</span> label on this page. Consider it as a bug or an unwanted behavior. We&rsquo;re going to track it down and found where this was introduced.</p>

<p>So, first you run this command to launch bisect:</p>

<pre><code>git bisect start
</code></pre>

<p>Then you type:</p>

<pre><code>git bisect bad
</code></pre>

<p>This one says that the current commit (HEAD, but you can specify another one)  contains the bug.</p>

<p>The next step is to give <code>bisect</code> a good commit (where you&rsquo;re sure everything was working fine, like a release for instance). In our case we&rsquo;re sure that the first commit was sane.</p>

<pre><code>git bisect good 0db16be
</code></pre>

<p>So now, bisect is &lsquo;calibrated&rsquo; and know the section in your git history to work on.<br/>
It then picks some commits (based on the <a href="http://en.wikipedia.org/wiki/Binary_search_algorithm">binary search algorthm</a>) and all you have to do is to look if the bug is still present in your application/page/whatever.</p>

<p>In our case, we simply refresh the page.</p>

<p><img class="center" src="http://requiremind.com/images/gitbisect/tuto-git-bisect-2.png" title="tuto 2" alt="tuto 2"></p>

<p>We can see that the red label is still present. So we say:</p>

<pre><code>git bisect bad
</code></pre>

<p><code>bisect</code> picks another commit for us and we need to test it again.</p>

<p><img class="center" src="http://requiremind.com/images/gitbisect/tuto-git-bisect-3.png" title="tuto 3" alt="tuto 3"></p>

<p>Yes! Good news, the red label isn&rsquo;t present anymore! So we type in:</p>

<pre><code>git bisect good
</code></pre>

<p>And we&rsquo;re done! <code>git bisect</code> have find out which commit is guilty. In our case it&rsquo;s the <code>b768e24 - Lorem ipsum is cooooool!</code>. We have successfuly found the problem origin and we now can easily fix it.</p>

<p>Before going back to work you need to enter</p>

<pre><code>git bisect reset
</code></pre>

<p>to reset your <code>HEAD</code> to where you were before you started.</p>

<p>This example was really simple because it contains only a few commits and there is only one file. But in a real life case, it could be really useful!</p>

<h3>Going further</h3>

<p>You have found the bad commit. This is great, you can now check the files that this commit contains and you will easily find where the bug has been introduced. In our case, it&rsquo;s in the <code>index.html</code> file on line 21.</p>

<p>So you can run the following to see who is guilty:</p>

<pre><code>git blame index.html -L 21,21
</code></pre>

<p>In this case it&rsquo;s.. me! Of course. This is a really cool feature that you could play with.</p>

<p>Last information about <code>git bisect</code>. In this example we were required to say manually on each commits picked by bisect if it was a good or a bad one.<br/>
This is really not a good way to go if you have a long git history.</p>

<p>Fortunately you can use a script to automate <code>git bisect</code>.<br/>
Your script should return 0 if it&rsquo;s good or non-0 if a bug occured.
Then you simply run:</p>

<pre><code>git bisect run bug-hunter.sh
</code></pre>

<p>You can retrieve all official documentation about <a href="http://git-scm.com/book/en/git-Tools-Debugging-with-git">git bisect</a>.</p>

<p>Hope it will help you on your next bug hunting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying a Rails App on Your Own Server - The Ultimate Guide]]></title>
    <link href="http://requiremind.com/deploying-a-rails-app-on-your-own-server-the-ultimate-guide"/>
    <updated>2014-02-05T23:28:00+01:00</updated>
    <id>http://requiremind.com/deploying-a-rails-app-on-your-own-server-the-ultimate-guide</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve been giving life to a project of my own (<a href="https://6lock.com">6lock.com</a>) and I had to go through some steps to get the Rails app up and
running with the best possible conditions.</p>

<p>In this tutorial, I&rsquo;ll try to show you how to deploy your Rails app on a <em>secured</em> Ubuntu Server 12.04 using <em>Capistrano</em>, <em>Unicorn</em>, <em>Nginx</em>. Part of my
setup includes <em>MongoDB</em> and <em>Sidekiq</em> so I figured I would also explain how I configured those two.</p>

<!-- more -->


<p>Here I&rsquo;ll be assuming that you already have a basic understanding of Rails, git and rvm, and that you have a working application (running on your machine)
that also has a Github or Bitbucket repo (or any other code hosting service).</p>

<p>Here are the tutorials I used myself. Please note that this guide will be highly based on those other tutorials, my primary goal was to have all the needed
information in one unique place.</p>

<ul>
<li><a href="https://www.digitalocean.com/community/articles/initial-server-setup-with-ubuntu-12-04">Initial Server Setup with Ubuntu 12.04</a></li>
<li><a href="http://www.thefanclub.co.za/how-to/how-secure-ubuntu-1204-lts-server-part-1-basics">How to Secure Ubuntu 12.04 Server</a></li>
<li><a href="https://www.digitalocean.com/community/articles/how-to-add-swap-on-ubuntu-12-04">How to Add Swap on Ubuntu 12.04</a></li>
<li><a href="https://coderwall.com/p/yz8cha">Deploying Rails app using Nginx, Unicorn and Capistrano</a></li>
<li><a href="http://www.westphahl.net/blog/2012/01/03/setting-up-https-with-nginx-and-startssl/">Setting up HTTPS with Nginx and StartSSL</a></li>
</ul>


<p>First of all you need to have a private server on which you have a ssh access. If you do not have one yet, I suggest taking a VPS at
<a href="https://www.digitalocean.com/">Digital Ocean</a>, they have SSDs in every server and you can have one in just under one minute, starting from 5$/month.</p>

<p><em>A lot of the following commands need <code>sudo</code> to work.</em></p>

<p>You can start by updating packages with <code>apt-get update</code>.</p>

<p>Annnnnnddd that&rsquo;s a go!</p>

<h2>Setting up some basic security rules</h2>

<h3>Users management</h3>

<p>First, change the <strong>root password</strong>:</p>

<pre><code>passwd
</code></pre>

<p>Then you can add a new user so that after we can allow this new user to log in via <strong>ssh</strong> and <strong>disallow root login</strong>.</p>

<pre><code>adduser johnsnow
</code></pre>

<p>We now have to give some permissions to this new user. Edit the corresponding file with:</p>

<pre><code>visudo
</code></pre>

<p>And add this line:</p>

<pre><code>johnsnow ALL=(ALL:ALL) ALL
</code></pre>

<h3>SSH hardening</h3>

<p>Edit the related configuration file. I always use <code>nano</code> but you can use <code>vi</code> or any other editor of your choice.</p>

<pre><code>nano /etc/ssh/sshd_config
</code></pre>

<p>Add or change these lines:</p>

<pre><code>Port xxxxx
Protocol 2
PermitRootLogin no
UseDNS no
AllowUsers johnsnow
DebianBanner no
</code></pre>

<p><code>Port</code>: you can choose any unused port from 1025 up to 65536, this is the port you&rsquo;ll use to log in via ssh, instead of the standard port 22.
This makes it harder for someone to try to log in on your server.</p>

<p><code>Protocol 2</code>: tells ssh to use SSHv2 instead of SSHv1, see <a href="http://www.snailbook.com/faq/ssh-1-vs-2.auto.html">SSHv1 vs SSHv2</a> for a list of the differences.</p>

<p><code>PermitRootLogin no</code>: disables the login via ssh using <strong>root</strong>.</p>

<p><code>UseDNS no</code>: this option is probably the least important one, check it out here
<a href="http://unix.stackexchange.com/questions/56941/what-is-the-point-of-sshd-usedns-option">What is the Point of sshd UseDNS Option</a>.</p>

<p><code>AllowUsers johnsnow</code>: makes <strong>johnsnow</strong> the only user allowed to log in via ssh.</p>

<p><code>DebianBanner no</code>: prevents ssh from broadcasting the distribution information, more information here
<a href="https://scottlinux.com/2011/06/14/disable-debian-banner-suffix-on-ssh-server/">Disable Debian Banner Suffix on ssh Server</a>.</p>

<p>Then you just have to <code>reload</code> ssh:</p>

<pre><code>reload ssh
</code></pre>

<p>That&rsquo;s it, you&rsquo;re done, you can no longer log in using <strong>root</strong>. Now, you can do it using your user like so:</p>

<pre><code>ssh johnsnow@your_server_ip_address -p xxxxx
</code></pre>

<p><code>xxxxx</code> being the port you chose earlier in the configuration.</p>

<h3>Firewall setup</h3>

<p>Next we are going to set up a firewall that&rsquo;s called UFW as in <strong>Uncomplicated Firewall</strong>.</p>

<pre><code>apt-get install ufw
</code></pre>

<p>And we are going to allow the port we use for <strong>ssh</strong>, <strong>http</strong> and <strong>https</strong> protocols.</p>

<pre><code>ufw allow xxxxx
ufw allow http
ufw allow https
</code></pre>

<p><code>xxxxx</code> still being our ssh port.</p>

<p>Now we just have to enable the firewall with:</p>

<pre><code>ufw allow enable
</code></pre>

<p>Now open a second shell and try logging in again via ssh to be sure you didn&rsquo;t break anything with the firewall rules.</p>

<p>You can check everything with:</p>

<pre><code>ufw status verbose
</code></pre>

<h3>Shared memory</h3>

<p>To quote the tutorial I followed: <em>&ldquo;shared memory can be used in an attack against a running service&rdquo;</em>. To secure it, just edit the <strong>fstab</strong> file.</p>

<pre><code>nano /etc/fstab
</code></pre>

<p>And add this line:</p>

<pre><code>tmpfs     /dev/shm     tmpfs     defaults,noexec,nosuid     0     0
</code></pre>

<p>This works on Ubuntu 12.04, for later versions, replace <code>/dev/shm</code> by <code>/run/shm</code>. Just save and reboot.</p>

<h3>Network security</h3>

<p>Edit the <strong>sysctl</strong> file:</p>

<pre><code>nano /etc/sysctl.conf
</code></pre>

<p>And add or change the following lines:</p>

<pre><code># IP Spoofing protection
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1

# Ignore ICMP broadcast requests
net.ipv4.icmp_echo_ignore_broadcasts = 1

# Disable source packet routing
net.ipv4.conf.all.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0 
net.ipv4.conf.default.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0

# Ignore send redirects
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0

# Block SYN attacks
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_max_syn_backlog = 2048
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 5

# Log Martians
net.ipv4.conf.all.log_martians = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1

# Ignore ICMP redirects
net.ipv4.conf.all.accept_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0 
net.ipv6.conf.default.accept_redirects = 0

# Ignore Directed pings
net.ipv4.icmp_echo_ignore_all = 1
</code></pre>

<p>To reload the configuration, just issue:</p>

<pre><code>sysctl -p
</code></pre>

<h3>IP Spoofing</h3>

<p>To prevent this, edit the <strong>host</strong> file:</p>

<pre><code>nano /etc/host.conf
</code></pre>

<p>And add these lines:</p>

<pre><code>order bind,hosts
nospoof on
</code></pre>

<h3>DenyHosts</h3>

<p>To quote the tutorial I followed once again: <em>&ldquo;denyHosts is a python program that automatically blocks SSH attacks by adding entries to /etc/hosts.deny.
DenyHosts will also inform Linux administrators about offending hosts, attacked users and suspicious logins&rdquo;</em>.</p>

<p>Install the program:</p>

<pre><code>apt-get install denyhosts
</code></pre>

<p>If you have to edit email settings or other options, you can edit the following file:</p>

<pre><code>nano /etc/denyhosts.conf
</code></pre>

<h3>Fail2Ban</h3>

<p>Fail2Ban listens for failed attemps of connections, exploits etc.. and blocks corresponding IP addresses by updating the firewall rules dynamically.<br/>
To install it, just use the usual:</p>

<pre><code>apt-get install fail2ban
</code></pre>

<p>Edit the configuration file and change the ssh port to the one you are using in the &ldquo;ssh&rdquo; section of the file.</p>

<pre><code>nano /etc/fail2ban/jail.conf
</code></pre>

<p>Change <code>port = ssh</code> to <code>port = xxxxx</code>.</p>

<p>And finally, restart Fail2Ban with:</p>

<pre><code>service fail2ban restart
</code></pre>

<h3>Rootkits</h3>

<p>To finish with security we are going to install programs that check the server for rootkits. A rootkit is a software that has been built to hide processes or
programs and grant them privileged access.</p>

<p>Install two programs:</p>

<pre><code>apt-get install rkhunter chkrootkit
</code></pre>

<p>Update and run the first one:</p>

<pre><code>rkhunter --update
rkhunter --propupd
rkhunter --check
</code></pre>

<p>Just run the second one:</p>

<pre><code>chkrootkit
</code></pre>

<h3>AppArmor</h3>

<p>I&rsquo;ll let Wikipedia describe what it does: <a href="http://en.wikipedia.org/wiki/AppArmor">http://en.wikipedia.org/wiki/AppArmor</a>.</p>

<pre><code>apt-get install apparmor apparmor-profiles
</code></pre>

<h2>SWAP</h2>

<p>If you have a limited RAM, say 512M, you might want to add some swap just in case.<br/>
First check that you do not have swap already in use:</p>

<pre><code>swapon -s
</code></pre>

<p>If this results in an empty list, then you&rsquo;re good.<br/>
You can now create the swapfile and setup a swap area with it:</p>

<pre><code>dd if=/dev/zero of=/swapfile bs=1024 count=512k
mkswap /swapfile
</code></pre>

<p>Now you can enable the file:</p>

<pre><code>swapon /swapfile
</code></pre>

<p>Run the first command to see what changed:</p>

<pre><code>swapon -s
</code></pre>

<p>You should see a new line in the list.<br/>
Now we have to edit <strong>/etc/fstab</strong> file so that these changes still work after a reboot:</p>

<pre><code>nano /etc/fstab
</code></pre>

<p>And add this line:</p>

<pre><code>/swapfile       none    swap    sw      0       0
</code></pre>

<p>Now we have to choose when the system should use this swap space instead of using RAM. For this we have to choose a value between 0 and 100 that&rsquo;s going to be the
left percentage of RAM before using swap. For instance, if we have 512M RAM and we set the value to 10, it means the system will start using swap when we have
less than 10% of RAM available, or if you prefere less than 50M available. Here we set the value to <strong>0</strong>, this means the system will swap only in case of emergency
at the last moment. I personnaly had to set it to <strong>20</strong> for the assets precompilation to work, otherwise I was running into an error (the only indication was
&ldquo;<em>killed</em>&rdquo;).</p>

<pre><code>echo 0 | sudo tee /proc/sys/vm/swappiness
echo vm.swappiness = 0 | sudo tee -a /etc/sysctl.conf
</code></pre>

<p>Just set permissions on the file and you&rsquo;re done:</p>

<pre><code>sudo chown root:root /swapfile 
sudo chmod 0600 /swapfile
</code></pre>

<h2>Nginx and Unicorn</h2>

<h3>RVM, MongoDB, Redis and other stuff</h3>

<p>Before actually installing and configuring Nginx and Unicorn, we&rsquo;re going to install <strong>rvm</strong>, <strong>git</strong>, and <strong>nodejs</strong>.<br/>
First, let&rsquo;s install <strong>curl</strong>:</p>

<pre><code>apt-get install curl
</code></pre>

<p>And <strong>rvm</strong>:</p>

<pre><code>curl -L get.rvm.io | bash -s stable
</code></pre>

<p>Then make it available in your current shell:</p>

<pre><code>source ~/.rvm/scripts/rvm
</code></pre>

<p>And install the requirements:</p>

<pre><code>rvm requirements
</code></pre>

<p>Install the ruby version your are using in your application, for instance 2.0.0, and make it the default for the system:</p>

<pre><code>rvm install 2.0.0
rvm use 2.0.0 --default
</code></pre>

<p>Update <strong>rubygems</strong> just in case:</p>

<pre><code>rvm rubygems current
</code></pre>

<p>Install git:</p>

<pre><code>apt-get install git-core
</code></pre>

<p>I usually install <strong>NodeJS</strong> for assets precompilation:</p>

<pre><code>apt-get install nodejs
</code></pre>

<p>Let&rsquo;s install <strong>MongoDB</strong>:</p>

<pre><code>apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list
apt-get update
apt-get install mongodb-10gen
</code></pre>

<p>We have to create the default <strong>/data/db</strong> directory and set the owner and permissions accordingly:</p>

<pre><code>mkdir -p /data/db
chmod 0755 /data/db
chown mongodb /data/db
</code></pre>

<p>Let&rsquo;s install <strong>Redis</strong> now (for sidekiq):</p>

<pre><code>apt-get install redis-server
</code></pre>

<p>And we&rsquo;re going to need <strong>bundler</strong> too:</p>

<pre><code>gem install bundler
</code></pre>

<p>Finally, at some point, chances are that you&rsquo;re going to install some gem requiring <strong>Nokogiri</strong> which requires additional packages, so let&rsquo;s install those
packages beforehand:</p>

<pre><code>apt-get install libxslt-dev libxml2-dev
</code></pre>

<h3>Nginx</h3>

<p>It&rsquo;s now time to install <strong>Nginx</strong> and run it:</p>

<pre><code>apt-get install nginx
service nginx start
</code></pre>

<p>Now if you navigate to your_server_ip_address in a browser, you should see the default Nginx page.</p>

<p>Let&rsquo;s configure it. Add this in <strong>/etc/nginx/nginx.conf</strong>, in the <strong>http { &hellip; }</strong> block:</p>

<pre><code>upstream unicorn {
  server unix:/tmp/unicorn.your_project.sock fail_timeout=0;
}

server {
  listen 80 default_server deferred;
  # server_name example.com;
  root /home/johnsnow/apps/your_project/current/public;

  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  try_files $uri/index.html $uri @unicorn;
  location @unicorn {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://unicorn;
  }

  error_page 500 502 503 504 /500.html;
  client_max_body_size 20M;
  keepalive_timeout 10;
}
</code></pre>

<p>Let&rsquo;s break it down:</p>

<p>The <code>upstream</code> block will be used to proxy requests to a Unicorn unix socket (a socket used by Unicorn to listen and process requests). Right now there is no
socket yet but we&rsquo;ll be configuring this later on. Then we use this in the <code>server</code> block with the line <code>proxy_pass http://unicorn</code>.</p>

<p>The <code>root</code> line is used to point to the <strong>public</strong> directory of the Rails app. This path structure is the one set up by <strong>Capistrano</strong> when deploying the
application.</p>

<p>The <code>client_max_body_size</code> directive is used to set the maximum body size of client requests. Check it out here:
<a href="http://wiki.nginx.org/HttpCoreModule#client_max_body_size">http://wiki.nginx.org/HttpCoreModule#client_max_body_size</a>.</p>

<p>You can look the internet up for the rest of these options, you&rsquo;ll find way more information than what I could write here.</p>

<h3>Unicorn</h3>

<p>Add the <strong>unicorn</strong> gem to your project: in the Gemfile, add</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># I am currently using version 4.8.0</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;unicorn&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.8.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re going to create the configuration file for <strong>Unicorn</strong>: in your application, create a file <strong>config/unicorn.rb</strong>:</p>

<figure class='code'><figcaption><span>config/unicorn.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">root</span> <span class="o">=</span> <span class="s2">&quot;/home/johnsnow/apps/your_project/current&quot;</span>
</span><span class='line'><span class="n">working_directory</span> <span class="n">root</span>
</span><span class='line'><span class="n">pid</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">root</span><span class="si">}</span><span class="s2">/tmp/pids/unicorn.pid&quot;</span>
</span><span class='line'><span class="n">stderr_path</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">root</span><span class="si">}</span><span class="s2">/log/unicorn.log&quot;</span>
</span><span class='line'><span class="n">stdout_path</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">root</span><span class="si">}</span><span class="s2">/log/unicorn.log&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">listen</span> <span class="s2">&quot;/tmp/unicorn.your_project.sock&quot;</span>
</span><span class='line'><span class="n">worker_processes</span> <span class="mi">2</span>
</span><span class='line'><span class="n">timeout</span> <span class="mi">30</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Force the bundler gemfile environment variable to</span>
</span><span class='line'><span class="c1"># reference the capistrano &quot;current&quot; symlink</span>
</span><span class='line'><span class="n">before_exec</span> <span class="k">do</span> <span class="o">|</span><span class="n">_</span><span class="o">|</span>
</span><span class='line'>  <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;BUNDLE_GEMFILE&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;Gemfile&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And an initialization script for <strong>Unicorn</strong> as well in <strong>config/unicorn_init.sh</strong>, this file will be symlinked later in <strong>/etc/init.d/</strong>:</p>

<figure class='code'><figcaption><span>config/unicorn_init.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c">### BEGIN INIT INFO</span>
</span><span class='line'><span class="c"># Provides:          unicorn</span>
</span><span class='line'><span class="c"># Required-Start:    $remote_fs $syslog</span>
</span><span class='line'><span class="c"># Required-Stop:     $remote_fs $syslog</span>
</span><span class='line'><span class="c"># Default-Start:     2 3 4 5</span>
</span><span class='line'><span class="c"># Default-Stop:      0 1 6</span>
</span><span class='line'><span class="c"># Short-Description: Manage unicorn server</span>
</span><span class='line'><span class="c"># Description:       Start, stop, restart unicorn server for a specific application.</span>
</span><span class='line'><span class="c">### END INIT INFO</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>
</span><span class='line'><span class="c"># Feel free to change any of the following variables for your app:</span>
</span><span class='line'><span class="nv">TIMEOUT</span><span class="o">=</span><span class="k">${</span><span class="nv">TIMEOUT</span><span class="p">-60</span><span class="k">}</span>
</span><span class='line'><span class="nv">APP_ROOT</span><span class="o">=</span>/home/johnsnow/apps/your_project/current
</span><span class='line'><span class="nv">PID</span><span class="o">=</span><span class="nv">$APP_ROOT</span>/tmp/pids/unicorn.pid
</span><span class='line'><span class="nv">CMD</span><span class="o">=</span><span class="s2">&quot;cd $APP_ROOT; bundle exec unicorn -D -c $APP_ROOT/config/unicorn.rb -E production&quot;</span>
</span><span class='line'><span class="nv">AS_USER</span><span class="o">=</span>johnsnow
</span><span class='line'><span class="nb">set</span> -u
</span><span class='line'>
</span><span class='line'><span class="nv">OLD_PIN</span><span class="o">=</span><span class="s2">&quot;$PID.oldbin&quot;</span>
</span><span class='line'>
</span><span class='line'>sig <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">test</span> -s <span class="s2">&quot;$PID&quot;</span> <span class="o">&amp;&amp;</span> <span class="nb">kill</span> -<span class="nv">$1</span> <span class="sb">`</span>cat <span class="nv">$PID</span><span class="sb">`</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>oldsig <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">test</span> -s <span class="nv">$OLD_PIN</span> <span class="o">&amp;&amp;</span> <span class="nb">kill</span> -<span class="nv">$1</span> <span class="sb">`</span>cat <span class="nv">$OLD_PIN</span><span class="sb">`</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>run <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$(id -un)&quot;</span> <span class="o">=</span> <span class="s2">&quot;$AS_USER&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">eval</span> <span class="nv">$1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'><span class="k">    </span>su -c <span class="s2">&quot;$1&quot;</span> - <span class="nv">$AS_USER</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;$1&quot;</span> in
</span><span class='line'>start<span class="o">)</span>
</span><span class='line'>  sig 0 <span class="o">&amp;&amp;</span> <span class="nb">echo</span> &gt;&amp;2 <span class="s2">&quot;Already running&quot;</span> <span class="o">&amp;&amp;</span> <span class="nb">exit </span>0
</span><span class='line'>  run <span class="s2">&quot;$CMD&quot;</span>
</span><span class='line'>  ;;
</span><span class='line'>stop<span class="o">)</span>
</span><span class='line'>  sig QUIT <span class="o">&amp;&amp;</span> <span class="nb">exit </span>0
</span><span class='line'>  <span class="nb">echo</span> &gt;&amp;2 <span class="s2">&quot;Not running&quot;</span>
</span><span class='line'>  ;;
</span><span class='line'>force-stop<span class="o">)</span>
</span><span class='line'>  sig TERM <span class="o">&amp;&amp;</span> <span class="nb">exit </span>0
</span><span class='line'>  <span class="nb">echo</span> &gt;&amp;2 <span class="s2">&quot;Not running&quot;</span>
</span><span class='line'>  ;;
</span><span class='line'>restart|reload<span class="o">)</span>
</span><span class='line'>  sig HUP <span class="o">&amp;&amp;</span> <span class="nb">echo </span>reloaded OK <span class="o">&amp;&amp;</span> <span class="nb">exit </span>0
</span><span class='line'>  <span class="nb">echo</span> &gt;&amp;2 <span class="s2">&quot;Couldn&#39;t reload, starting &#39;$CMD&#39; instead&quot;</span>
</span><span class='line'>  run <span class="s2">&quot;$CMD&quot;</span>
</span><span class='line'>  ;;
</span><span class='line'>upgrade<span class="o">)</span>
</span><span class='line'>  <span class="k">if </span>sig USR2 <span class="o">&amp;&amp;</span> sleep 2 <span class="o">&amp;&amp;</span> sig 0 <span class="o">&amp;&amp;</span> oldsig QUIT
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nv">n</span><span class="o">=</span><span class="nv">$TIMEOUT</span>
</span><span class='line'>    <span class="k">while </span><span class="nb">test</span> -s <span class="nv">$OLD_PIN</span> <span class="o">&amp;&amp;</span> <span class="nb">test</span> <span class="nv">$n</span> -ge 0
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'><span class="k">      </span><span class="nb">printf</span> <span class="s1">&#39;.&#39;</span> <span class="o">&amp;&amp;</span> sleep 1 <span class="o">&amp;&amp;</span> <span class="nv">n</span><span class="o">=</span><span class="k">$((</span> <span class="nv">$n</span> <span class="o">-</span> <span class="m">1</span> <span class="k">))</span>
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span>
</span><span class='line'>
</span><span class='line'><span class="nb">    </span><span class="k">if </span><span class="nb">test</span> <span class="nv">$n</span> -lt 0 <span class="o">&amp;&amp;</span> <span class="nb">test</span> -s <span class="nv">$OLD_PIN</span>
</span><span class='line'>    <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> &gt;&amp;2 <span class="s2">&quot;$OLD_PIN still exists after $TIMEOUT seconds&quot;</span>
</span><span class='line'>      <span class="nb">exit </span>1
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">    </span><span class="nb">exit </span>0
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> &gt;&amp;2 <span class="s2">&quot;Couldn&#39;t upgrade, starting &#39;$CMD&#39; instead&quot;</span>
</span><span class='line'>  run <span class="s2">&quot;$CMD&quot;</span>
</span><span class='line'>  ;;
</span><span class='line'>reopen-logs<span class="o">)</span>
</span><span class='line'>  sig USR1
</span><span class='line'>  ;;
</span><span class='line'>*<span class="o">)</span>
</span><span class='line'>  <span class="nb">echo</span> &gt;&amp;2 <span class="s2">&quot;Usage: $0 &lt;start|stop|restart|upgrade|force-stop|reopen-logs&gt;&quot;</span>
</span><span class='line'>  <span class="nb">exit </span>1
</span><span class='line'>  ;;
</span><span class='line'><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure>


<p>The file is pretty much straightforward so I suggest you read it and see what it does. Basically, it is used to manage the unicorn process.</p>

<h3>Capistrano</h3>

<p>Add the required gems to your Gemfile:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;capistrano&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.15.4&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rvm-capistrano&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.5.1&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we create two files for Capistrano: <strong>Capfile</strong> and <strong>config/deploy.rb</strong> with the following command ran from the root directory of your app:</p>

<pre><code>capify .
</code></pre>

<p>As a side note, before we go further, I&rsquo;m supposing that you already have the mongoid gem or whatever ORM you&rsquo;re using and the sidekiq gem if you are using
sidekiq as well.</p>

<p>Let&rsquo;s write some instructions in the <strong>config/deploy.rb</strong> file:</p>

<figure class='code'><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;bundler/capistrano&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;rvm/capistrano&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;sidekiq/capistrano&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">server</span> <span class="s2">&quot;your_server_ip_address&quot;</span><span class="p">,</span> <span class="ss">:web</span><span class="p">,</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:db</span><span class="p">,</span> <span class="ss">primary</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s2">&quot;your_project&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s2">&quot;johnsnow&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:port</span><span class="p">,</span> <span class="n">xxxxx</span> <span class="c1">#your ssh port</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s2">&quot;/home/</span><span class="si">#{</span><span class="n">user</span><span class="si">}</span><span class="s2">/apps/</span><span class="si">#{</span><span class="n">application</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_via</span><span class="p">,</span> <span class="ss">:remote_cache</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:use_sudo</span><span class="p">,</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="s2">&quot;git&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span> <span class="s2">&quot;your_project.git&quot;</span> <span class="c1">#your application repo (for instance git@github.com:user/application.git)</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="s2">&quot;master&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">default_run_options</span><span class="o">[</span><span class="ss">:pty</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">ssh_options</span><span class="o">[</span><span class="ss">:forward_agent</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">after</span> <span class="s2">&quot;deploy&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:cleanup&quot;</span> <span class="c1"># keep only the last 5 releases</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>  <span class="sx">%w[start stop restart]</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">command</span><span class="o">|</span>
</span><span class='line'>    <span class="n">desc</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">command</span><span class="si">}</span><span class="s2"> unicorn server&quot;</span>
</span><span class='line'>    <span class="n">task</span> <span class="n">command</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">except</span><span class="p">:</span> <span class="p">{</span> <span class="n">no_release</span><span class="p">:</span> <span class="kp">true</span> <span class="p">}</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">run</span> <span class="s2">&quot;/etc/init.d/unicorn_</span><span class="si">#{</span><span class="n">application</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">command</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:setup_config</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:app</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># symlink the unicorn init file in /etc/init.d/</span>
</span><span class='line'>    <span class="n">sudo</span> <span class="s2">&quot;ln -nfs </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/config/unicorn_init.sh /etc/init.d/unicorn_</span><span class="si">#{</span><span class="n">application</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="c1"># create a shared directory to keep files that are not in git and that are used for the application</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;mkdir -p </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config&quot;</span>
</span><span class='line'>    <span class="c1"># if you&#39;re using mongoid, create a mongoid.template.yml file and fill it with your production configuration</span>
</span><span class='line'>    <span class="c1"># and add your mongoid.yml file to .gitignore</span>
</span><span class='line'>    <span class="n">put</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;config/mongoid.template.yml&quot;</span><span class="p">),</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/mongoid.yml&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Now edit the config files in </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">after</span> <span class="s2">&quot;deploy:setup&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:setup_config&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:symlink_config</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:app</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># symlink the shared mongoid config file in the current release</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;ln -nfs </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/mongoid.yml </span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/config/mongoid.yml&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">after</span> <span class="s2">&quot;deploy:finalize_update&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:symlink_config&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Create MongoDB indexes&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:mongoid_indexes</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2"> &amp;&amp; RAILS_ENV=production bundle exec rake db:mongoid:create_indexes&quot;</span><span class="p">,</span> <span class="ss">once</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">after</span> <span class="s2">&quot;deploy:update&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:mongoid_indexes&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Make sure local git is in sync with remote.&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:check_revision</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">unless</span> <span class="sb">`git rev-parse HEAD`</span> <span class="o">==</span> <span class="sb">`git rev-parse origin/master`</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;WARNING: HEAD is not the same as origin/master&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Run `git push` to sync changes.&quot;</span>
</span><span class='line'>      <span class="nb">exit</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">before</span> <span class="s2">&quot;deploy&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:check_revision&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve added some comments but feel free to read the rest of the file, it is straightforward as well.</p>

<p>Your <strong>Capfile</strong> should look like this:</p>

<figure class='code'><figcaption><span>Capfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">load</span> <span class="s1">&#39;deploy&#39;</span>
</span><span class='line'><span class="nb">load</span> <span class="s1">&#39;deploy/assets&#39;</span>
</span><span class='line'><span class="nb">load</span> <span class="s1">&#39;config/deploy&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add your ssh key to the authorized keys on your server:</p>

<pre><code># replace the port, the user and your ip address accordingly
cat ~/.ssh/id_rsa.pub | ssh -p xxxxx johnsnow@your_server_ip_address 'mkdir -p ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys'
</code></pre>

<p>Make sure you pushed all your changes to your repository (on Github or Bitbucket for instance).</p>

<p>Now we have to tell capistrano to create the initial directory structure on the server as described in the recipe we just created:</p>

<pre><code>cap deploy:setup
</code></pre>

<p>You can now go to your server and edit the <strong>mongoid.yml</strong> file in <strong>/home/johnsnow/apps/your_project/shared/config/mongoid.yml</strong>.</p>

<p>Then you&rsquo;ll have to run:</p>

<pre><code>cap deploy:cold
</code></pre>

<p>From the documentation, this will deploy the code, run any pending migrations (not used here because it&rsquo;s MongoDB), and then instead of invoking
<code>deploy:restart</code>, it will invoke <code>deploy:start</code> to fire up the application servers. Check it out here
<a href="http://capitate.rubyforge.org/recipes/deploy.html">http://capitate.rubyforge.org/recipes/deploy.html</a>.</p>

<p>Delete the default Nginx server block:</p>

<pre><code>rm /etc/nginx/sites-enabled/default
</code></pre>

<p>You can restart the <strong>nginx</strong> service to make sure the changes are taken into account:</p>

<pre><code>service nginx restart
</code></pre>

<p>Make sure <strong>Unicorn</strong> is restarted when rebooting the server:</p>

<pre><code>update-rc.d -f unicorn_your_project defaults
</code></pre>

<p>Push your changes (locally) one last time and deploy:</p>

<pre><code>git push
cap deploy
</code></pre>

<p>That&rsquo;s it, your app should be up and running when typing your server&rsquo;s ip address in your browser!</p>

<h2>Sidekiq</h2>

<p>We already required sidekiq in the capistrano recipe so everything should be fine but what if we restart the server? Let&rsquo;s create a script to make sure all the
processes properly restart when rebooting. This script is made to work with <strong>Upstart</strong>.</p>

<p>Create a file <strong>/etc/init/sidekiq.conf</strong>:</p>

<figure class='code'><figcaption><span>/etc/init/sidekiq.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># /etc/init/sidekiq.conf - Sidekiq config</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This example config should work with Ubuntu 12.04+.  It</span>
</span><span class='line'><span class="c"># allows you to manage multiple Sidekiq instances with</span>
</span><span class='line'><span class="c"># Upstart, Ubuntu&#39;s native service management tool.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Save this config as /etc/init/sidekiq.conf then manage sidekiq with:</span>
</span><span class='line'><span class="c">#   sudo start sidekiq index=0</span>
</span><span class='line'><span class="c">#   sudo stop sidekiq index=0</span>
</span><span class='line'><span class="c">#   sudo status sidekiq index=0</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># or use the service command:</span>
</span><span class='line'><span class="c">#   sudo service sidekiq {start,stop,restart,status}</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'>description <span class="s2">&quot;Sidekiq Background Worker&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># no &quot;start on&quot;, we don&#39;t want to automatically start</span>
</span><span class='line'>stop on <span class="o">(</span>stopping workers or runlevel <span class="o">[</span>06<span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="c"># change to match your deployment user</span>
</span><span class='line'>setuid johnsnow
</span><span class='line'>setgid johnsnow
</span><span class='line'>
</span><span class='line'>respawn
</span><span class='line'>respawn limit 3 30
</span><span class='line'>
</span><span class='line'><span class="c"># TERM and USR1 are sent by sidekiqctl when stopping sidekiq.  Without declaring these as normal exit codes, it just respawns.</span>
</span><span class='line'>normal <span class="nb">exit </span>0 TERM USR1
</span><span class='line'>
</span><span class='line'><span class="c"># instance $index</span>
</span><span class='line'>
</span><span class='line'>script
</span><span class='line'><span class="c"># this script runs in /bin/sh by default</span>
</span><span class='line'><span class="c"># respawn as bash so we can source in rbenv</span>
</span><span class='line'><span class="nb">exec</span> /bin/bash <span class="s">&lt;&lt;EOT</span>
</span><span class='line'><span class="s">  # use syslog for logging</span>
</span><span class='line'><span class="s">  # exec &amp;&gt; /dev/kmsg</span>
</span><span class='line'>
</span><span class='line'><span class="s">  # pull in system rbenv</span>
</span><span class='line'><span class="s">  # export HOME=/home/deploy</span>
</span><span class='line'><span class="s">  # source /etc/profile.d/rbenv.sh</span>
</span><span class='line'>
</span><span class='line'><span class="s">  cd /home/johnsnow/apps/your_project/current</span>
</span><span class='line'><span class="s">  nohup bundle exec sidekiq -e production -C config/sidekiq.yml -i 0 -P tmp/pids/sidekiq.pid &gt;&gt; log/sidekiq.log 2&gt;&amp;1 &amp;</span>
</span><span class='line'><span class="s">EOT</span>
</span><span class='line'>end script
</span></code></pre></td></tr></table></div></figure>


<p>Here are the options for the line starting with <code>nohup</code>:<br/>
<code>-e</code>: the environment<br/>
<code>-C</code>: a config file eventhough we do not have one<br/>
<code>-i</code>: sidekiq process index, from 0 to whatever you want, you&rsquo;ll have to loop and increment the value if you want to create multiple processes<br/>
<code>-P</code>: the file holding sidekiq&rsquo;s process id</p>

<p><code>nohup</code> is used to run sidekiq in the background and therefore keeping it alive event after logging off.</p>

<p>I took the line from this file, check it out:
<a href="https://github.com/mperham/sidekiq/blob/master/lib/sidekiq/capistrano2.rb">https://github.com/mperham/sidekiq/blob/master/lib/sidekiq/capistrano2.rb</a>.</p>

<h2>Setup daily MongoDB backups</h2>

<p>You&rsquo;ll often want to setup backups so here we go: just create a directory to store these backups.</p>

<pre><code>mkdir /home/johnsnow/dumps
</code></pre>

<p>Then create a script to actually make a dump:</p>

<figure class='code'><figcaption><span>/home/johnsnow/mongodump</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">DUMPPATH</span><span class="o">=</span>/home/johnsnow/dumps <span class="c"># dumps directory we just created</span>
</span><span class='line'><span class="nv">MONGODBNAME</span><span class="o">=</span>your_project_production <span class="c"># your MongoDB database name</span>
</span><span class='line'><span class="nv">DAY</span><span class="o">=</span><span class="sb">`</span>/bin/date +%Y%m%d<span class="sb">`</span> <span class="c"># today&#39;s datetime</span>
</span><span class='line'>
</span><span class='line'>mongodump --db <span class="nv">$MONGODBNAME</span> --out <span class="nv">$DUMPPATH</span>/mongo_<span class="nv">$DAY</span> <span class="c"># run the command we those variables set</span>
</span><span class='line'><span class="nb">cd</span> <span class="nv">$DUMPPATH</span>/mongo_<span class="nv">$DAY</span> <span class="c"># navigate to the folder where the dump was saved</span>
</span><span class='line'>tar -cvzf <span class="s2">&quot;$DUMPPATH/mongo_$DAY.tar&quot;</span> <span class="nv">$MONGODBNAME</span> <span class="c"># create an archive out of that dump</span>
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> <span class="nv">$DUMPPATH</span>
</span><span class='line'>rm -rf <span class="nv">$DUMPPATH</span>/mongo_<span class="nv">$DAY</span> <span class="c"># remove the dump because we only keep the archive version</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next make it executable:</p>

<pre><code>chmod +x mongodump
</code></pre>

<p>And create a cronjob:</p>

<pre><code>sudo crontab -e

# add the next line in the file
@daily /home/raindal/mongodump
</code></pre>

<p><code>@daily</code> means the script will be executed everyday at midnight.</p>

<p>That&rsquo;s it for backups!</p>

<h2>The end</h2>

<p>I hope it helps! If I forgot something, be sure to leave a comment below and I&rsquo;ll try to answer as quickly as I can.</p>

<p>Just in case you run in the same problems I did, I had to run another <code>update-rc.d -f unicorn_your_project defaults</code> at the end in order to have unicorn restarting
on server reboot. The second error was hapenning when I was deploying the application with <code>cap deploy</code> and the only indication was &ldquo;<em>killed</em>&rdquo; just in the
middle of the assets precompilation. To fix this I just had to set up some swap space because I was lacking memory.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Discover Emmet and improve your coding speed]]></title>
    <link href="http://requiremind.com/discover-emmet-and-improve-your-coding-speed"/>
    <updated>2013-12-06T23:23:00+01:00</updated>
    <id>http://requiremind.com/discover-emmet-and-improve-your-coding-speed</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re here, I assume you&rsquo;re a passionate web developer. If not, you&rsquo;ll become one after reading this article.
Indeed, <a href="http://emmet.io">Emmet</a> is an essential toolkit for you! It will improve your coding speed instantly and easily!</p>

<p>You seem interested, then keep reading to discover more.</p>

<!-- more -->


<p><img class="center" src="http://requiremind.com/images/emmet/fast-train-lights.jpg" title="fast train" alt="fast train"></p>

<h3>Emmet</h3>

<p>Ok, to begin I want to say that if you already heard about Zen Coding, then you&rsquo;ll find that Emmet is pretty similar.
In fact, Zen Coding has evolved into Emmet adding a bunch of new cool features that you&rsquo;ll discover soon.</p>

<p>In a nutshell, Emmet is a toolkit for web developpers that improves your HTML and CSS workflow.
You&rsquo;ll use CSS-like expressions to generate your HTML and a smart syntax to generate your CSS.</p>

<p>Enough talking, as always the best is to see some examples!</p>

<h3>HTML</h3>

<p>Warning! This is an important step!<br/>
Once you&rsquo;ll read and learn what is following, you&rsquo;ll</p>

<ul>
<li>First, fall in love with these new coding habits.</li>
<li>Second, you&rsquo;ll never, ever type a full tag anymore in your html.</li>
<li>Third you&rsquo;ll save an amazing amount of time.</li>
</ul>


<p>So if you are ok with this, keep reading.</p>

<p>Let&rsquo;s start with the easiest example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>can now be summarized as:</p>

<pre><code>div[tab]
</code></pre>

<p><em>(when I use [tab] it means, press the tab key <code>⇥</code>)</em><br/>
[tab] is the default key for executing Emmet in your code editor. It will dynamically parse the expression and generate the final html.<br/>
Here, it simply generates a <code>div</code> element.</p>

<blockquote><p>Ok, that&rsquo;s cool but is it all?</p></blockquote>

<p>Of course not! Let&rsquo;s see some magic happening!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>Element 1<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>Element 2<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">&quot;3&quot;</span><span class="nt">&gt;</span>Element 3<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>can be simplified by using:</p>

<pre><code>ul&gt;li*3&gt;p#${Element $} [tab]
</code></pre>

<p>Ok let&rsquo;s review this one, step by step.</p>

<p><code>ul</code>is our parent element.<br/>
Then we use the <code>&gt;</code> symbol which represents a child in html. <code>ul</code> contains <code>li</code>.<br/>
The <code>*</code> is a multiplication operator that allows us to define how many times we want to output the element. Here 3 times.<br/>
In each of these elements we got a <code>p</code> element with an id (represented by the <code>#</code>, for a class we should have used a <code>.</code>).<br/>
The <code>$</code> is a specific symbol. It&rsquo;s an integer that will increment by one for each item.<br/>
The curly braces <code>{}</code> represent the text. Here Element plus the current item number.</p>

<p>Ok I feel that you want one more example. Here you are:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Document<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>is now as simple as:</p>

<pre><code>html:5 [tab]
</code></pre>

<p>I hope that now you understand the concept and mainly you see the opportunities.</p>

<p>As this article&rsquo;s goal is just to make you discover this tool, we won&rsquo;t go deeper with the html examples.<br/>
You can refer to the <a href="http://docs.emmet.io">official documenation</a> whenever you need it.</p>

<h3>CSS</h3>

<p>Emmet also allows you to write CSS faster than ever before. I really use it a lot and it&rsquo;s easy to learn.<br/>
It defines a lot of shorcuts for the CSS properties.</p>

<p>I can&rsquo;t show them all, but here is a list of common examples (remember to press the <code>tab</code> key to execute Emmet):</p>

<pre><code>w23        =&gt; width: 23px;
w77p       =&gt; width: 77%;
pos:a      =&gt; position: absolute;
fr         =&gt; float: right;
db         =&gt; display: block;
tdu        =&gt; text-decoration: underline;
f5#f       =&gt; font: 5px #fff
bd+        =&gt; border:1px solid #000;
</code></pre>

<p>And it also takes care of the vendor prefixes:</p>

<pre><code>bdrs25 =&gt; -webkit-border-radius: 25px;
          -moz-border-radius: 25px;
          border-radius: 25px;
</code></pre>

<p>It&rsquo;s so intuitive that you&rsquo;ll learn them easily by practising and discovering them by yourself.<br/>
But as always, here is the <a href="http://docs.emmet.io/css-abbreviations">documentation</a>.</p>

<h3>Fuzzy search</h3>

<p>Emmet is really smart and implements a cool feature called <a href="http://docs.emmet.io/css-abbreviations/fuzzy-search">fuzzy search</a>.
This one is being used when we write an unknown abbreviation. Emmet will try to find the closest snippet definition and apply it.</p>

<p>For instance,</p>

<pre><code>fl:r  =&gt; float: right;
</code></pre>

<p>But we can break the convention and use <code>flr</code> instead. Emmet will use the fuzzy search to match <code>fl:r</code> and apply it.</p>

<h3>Code editors</h3>

<p>The power of Emmet also resides on the fact that it&rsquo;s available on a large amount of code editors as you can see on their official <a href="http://emmet.io/download">download page</a>.</p>

<p><img class="center" src="http://requiremind.com/images/emmet/editors.png" width="350" height="350" title="code editors" alt="code editors"></p>

<h3>Conclusion</h3>

<p>So, this was the introduction to Emmet. I hope you will use it a lot and see the improvement in your coding speed.
If you know other tools or anything like this one, feel free to leave a comment, I&rsquo;m definitely interested!</p>

<p>Here is my last present. If you&rsquo;re the kind of long cheat-sheet lovers then <a href="http://docs.emmet.io/cheat-sheet">here is your hapiness</a>. You won&rsquo;t be disappointed ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails 4 and Batman.js - Another Getting Started Tutorial]]></title>
    <link href="http://requiremind.com/ruby-on-rails-4-and-batman-dot-js-another-getting-started-tutorial"/>
    <updated>2013-10-06T22:08:00+02:00</updated>
    <id>http://requiremind.com/ruby-on-rails-4-and-batman-dot-js-another-getting-started-tutorial</id>
    <content type="html"><![CDATA[<p>I’ve never been using JS frameworks before, this is why I wanted to give it a shot. Many options here: AngularJS, Ember.js, Backbone.js, etc, makes the choice pretty hard
when you don’t know the subtleties of each. As a Rails developer, I chose Batman.js because of its “Rails orientation” and because I know that <a href="http://www.shopify.ca/">Shopify</a> folks here in Canada
are working hard to make things easy for us Rails developers (yes, they are developing Batman.js).</p>

<!-- more -->


<p>Throughout this tutorial I’m going to show you how I quickly built a simple post/comments application with Ruby on Rails 4 and Batman.js.</p>

<p>At the time I’m writing these lines, our friends of Gotham City are updating the <a href="http://batmanjs.org/docs/index.html">documentation</a>, so be sure to check it out: a lot of helpful, valuable resources.</p>

<p>You can find the application github repo here: <a href="https://github.com/Raindal/batman_js_blog">https://github.com/Raindal/batman_js_blog</a>.</p>

<p>I’m eager to better myself with the framework so any comment will be highly appreciated.</p>

<p>Let’s dive in!</p>

<h2>On the server side</h2>

<p>Here I’m assuming that you already installed Rails 4. We’re first going to create a new application called <strong>batman_js_blog</strong>.
Let’s skip the documentation part with the following line.</p>

<pre><code>rails new batman_js_blog --no-ri --no-rdoc
</code></pre>

<p>And just to be clear, <code>cd</code> into the application.</p>

<pre><code>cd batman_js_blog
</code></pre>

<blockquote><p>Tired of using <code>cd</code> everytime? Check out <a href="http://requiremind.com/why-i-love-my-development-environment">my previous post</a> and start using ZSH now!</p></blockquote>

<h3>The models</h3>

<p>The models are pretty simple, the posts will have a <strong>title</strong> and a <strong>content</strong>. The comments will have a <strong>content</strong> only and a reference to a post (<strong>post_id</strong>).</p>

<pre><code>rails g model post title:string content:text
rails g model comment content:text post:references
</code></pre>

<p>Let’s get the associations right: a post <em>has many</em> comments, therefore, a comment <em>belongs to</em> a post. Let’s create some validations for future usage
(see <em>Errors Handling</em> at the end).</p>

<figure class='code'><figcaption><span>app/models/post.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:title</span><span class="p">,</span>   <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:content</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>references</code> when generating the Comment model should already get this part right with the <code>belongs_to</code>:</p>

<figure class='code'><figcaption><span>app/models/comment.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:post</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the migrations to create both tables, as usual.</p>

<pre><code>rake db:migrate
</code></pre>

<p>We’re going to create some seeds to populate the database with fake data to work with. Let’s create 20 posts with 5 comments each.</p>

<figure class='code'><figcaption><span>db/seeds.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">20</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Post </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">content</span><span class="p">:</span> <span class="s2">&quot;Some awesome content&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="o">|</span><span class="n">j</span><span class="o">|</span> <span class="n">post</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">content</span><span class="p">:</span> <span class="s2">&quot;Comment n°</span><span class="si">#{</span><span class="n">j</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the seeds.</p>

<pre><code>rake db:seed
</code></pre>

<p>Here we are using nested routes (nested resources) to reflect the associations we created earlier.<br/>
This will enable routes like /posts/:post_id/comments/:id.</p>

<figure class='code'><figcaption><span>config/routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:posts</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:comments</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The controllers</h3>

<p>First you can create a <strong>posts_controller.rb</strong> file in your controllers folder.</p>

<p>As we only need to serve <strong>json</strong>, we’re going to use the handy <code>respond_to</code> method at the top of our controller. Then, in every action we only have to use <code>respond_with</code>,
that will basically call <code>to_json</code> on our resources.</p>

<p>When displaying a specific post, we want to display its comments as well, so we need to return them with the post, this is why we use <code>include: :comments</code> in the show action.</p>

<p>We do not need the <code>new</code> and <code>edit</code> actions, because Batman.js will take care of showing the form for us (it can because those actions do not require an interaction
with the database).</p>

<p>The rest of the controller is pretty much straightforward if you know your way around with Rails (which I assume).</p>

<figure class='code'><figcaption><span>app/controllers/posts_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">respond_to</span> <span class="ss">:json</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">Post</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">),</span> <span class="kp">include</span><span class="p">:</span> <span class="ss">:comments</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">Post</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">post_params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="n">post_params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="n">post</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">destroy</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">post_params</span>
</span><span class='line'>      <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:content</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The comments controller is rather simple too. We’re not going to list all the comments, neither are we going to show one comment on its own,
we’re not allowing the edition of a comment either. That means we don’t need the index, show, and update actions.</p>

<p>The only thing we want to do is display related comments on every post&rsquo;s show view and a small form for adding a comment (plus a link for destroying each post).<br/>
As I stated before, the comments are returned with every post thanks to <code>include: :comments</code> so we don&rsquo;t have to take care of this. The only thing left to do is enable
comments creation and destruction.</p>

<p>You can create a <strong>comments_controller.rb</strong> file:</p>

<figure class='code'><figcaption><span>app/controllers/comments_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CommentsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">respond_to</span> <span class="ss">:json</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">comment</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">comment_params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">comment</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="n">respond_with</span><span class="p">(</span><span class="n">post</span><span class="p">,</span> <span class="n">comment</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="n">comment</span> <span class="o">=</span> <span class="no">Comment</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">respond_with</span><span class="p">(</span><span class="n">comment</span><span class="o">.</span><span class="n">post</span><span class="p">,</span> <span class="n">comment</span><span class="o">.</span><span class="n">destroy</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">comment_params</span>
</span><span class='line'>      <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:comment</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:content</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can now run a server with <code>rails s</code> and navigate to <a href="http://localhost:3000/posts.json">http://localhost:3000/posts.json</a> to check that you do have a json posts list displayed.
You can check that each post is returned with its associated comments by navigating to <a href="http://localhost:3000/posts/1.json">http://localhost:3000/posts/1.json</a>.</p>

<h2>On the client side</h2>

<p>Now we can really crack into the subject. First of all, let’s add the gem to our gemfile and run <code>bundle</code> to install it.</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Bundle edge Rails instead: gem &#39;rails&#39;, github: &#39;rails/rails&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;4.0.0&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;batman-rails&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>bundle
</code></pre>

<p>We can now generate the skeleton of our Batman.js app, it’s going to reside in <strong>app/assets/batman</strong>.</p>

<pre><code>rails g batman:app
</code></pre>

<p>This created the following folders and files:</p>

<pre><code>create  app/controllers/batman_controller.rb
create  app/views/layouts/batman.html.erb
insert  config/routes.rb
create  app/assets/batman/batman_js_blog.js.coffee
create  app/assets/batman/models
create  app/assets/batman/models/.gitkeep
create  app/assets/batman/views
create  app/assets/batman/views/.gitkeep
create  app/assets/batman/controllers
create  app/assets/batman/controllers/.gitkeep
create  app/assets/batman/html
create  app/assets/batman/html/.gitkeep
create  app/assets/batman/lib
create  app/assets/batman/lib/.gitkeep
create  app/assets/batman/html/main
create  app/assets/batman/controllers/application_controller.js.coffee
create  app/assets/batman/controllers/main_controller.js.coffee
create  app/assets/batman/html/main/index.html
create  app/assets/batman/views/main/main_index_view.js.coffee
prepend  app/assets/batman/batman_js_blog.js.coffee
prepend  app/assets/batman/batman_js_blog.js.coffee
prepend  app/assets/batman/batman_js_blog.js.coffee
prepend  app/assets/batman/batman_js_blog.js.coffee
</code></pre>

<p>You can navigate to <a href="http://localhost:3000">http://localhost:3000</a> to see Batman.js home page.</p>

<h3>Sneak peek</h3>

<p>If you open the <strong>index view</strong>, you&rsquo;re probably going to see something like this somewhere in the file:</p>

<figure class='code'><figcaption><span>app/assets/batman/html/main/index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div&gt;&lt;label&gt;</span>First Name:<span class="nt">&lt;/label&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;firstName&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div&gt;&lt;label&gt;</span>Last Name:<span class="nt">&lt;/label&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;lastName&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">data-showif=</span><span class="s">&quot;hasName&quot;</span><span class="nt">&gt;</span>Hello, my name is <span class="nt">&lt;span</span> <span class="na">data-bind=</span><span class="s">&quot;fullName&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div&gt;&lt;button</span> <span class="na">data-event-click=</span><span class="s">&quot;resetName&quot;</span><span class="nt">&gt;</span>Reset name<span class="nt">&lt;/button&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, now you can finally catch a glimpse of Batman.js&hellip; And I&rsquo;m going to go through each element here.<br/>
Every <code>data</code> property you see here is Batman related and as we speak about a JS framework, each of these properties will apply live all the time.</p>

<p><code>data-bind</code>: binds the element&rsquo;s inner html to the given accessor&rsquo;s value. For instance the first input will display the value returned by <code>firstName</code>.<br/>
<code>data-showif</code>: shows the element depending on the value of <code>hasName</code> which is a boolean.<br/>
<code>data-event-click</code>: triggers the given method upon click.</p>

<p>Now take a look at the controller.</p>

<figure class='code'><figcaption><span>app/assets/batman/controllers/main_controller.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">MainController</span> <span class="k">extends</span> <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">ApplicationController</span>
</span><span class='line'>  <span class="nv">routingKey: </span><span class="s">&#39;main&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">index: </span><span class="nf">(params) -&gt;</span>
</span><span class='line'>    <span class="nx">@set</span> <span class="s">&#39;firstName&#39;</span><span class="p">,</span> <span class="s">&#39;Bruce&#39;</span>
</span><span class='line'>    <span class="nx">@set</span> <span class="s">&#39;lastName&#39;</span><span class="p">,</span> <span class="s">&#39;Wayne&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;fullName&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="s">&quot;</span><span class="si">#{</span><span class="nx">@get</span><span class="p">(</span><span class="s">&#39;firstName&#39;</span><span class="p">)</span><span class="si">}</span><span class="s"> </span><span class="si">#{</span><span class="nx">@get</span><span class="p">(</span><span class="s">&#39;lastName&#39;</span><span class="p">)</span><span class="si">}</span><span class="s">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can actually see that the initial values are set in the <code>index</code> action using <code>@set('var', 'value')</code>.<br/>
You can also see that the <code>fullName</code> accessor that is used in a <code>data-bind</code> is defined here and returns the values of the <code>firstName</code> and <code>lastName</code> variables combined
with <code>@get('var')</code>.</p>

<p>Now let&rsquo;s see <code>hasName</code> and <code>resetName</code>. These two reside in the following file.</p>

<figure class='code'><figcaption><span>app/assets/batman/views/main/main_index_view.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">MainIndexView</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">View</span>
</span><span class='line'>  <span class="nv">resetName: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@controller</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s">&#39;firstName&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">@controller</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s">&#39;lastName&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;hasName&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@controller</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;fullName&#39;</span><span class="p">).</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code is specific to the index view. <code>hasName</code> checks that <code>fullName</code> contains at least one character and <code>resetName</code> resets tha values of <code>firstName</code> and <code>lastName</code>.</p>

<h3>The models</h3>

<p>We can go and create folders and files for the post resource.</p>

<pre><code>rails g batman:scaffold post
</code></pre>

<p>The last command is a bit overkill for what we want to do but pretty handy for starting the project.</p>

<p>Take a look at the main batman file and change the <code>@root</code> to <code>posts#index</code>.</p>

<figure class='code'><figcaption><span>app/assets/batman/batman_js_blog.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">Batman.config.pathToHTML = </span><span class="s">&#39;/assets/html&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nx">BatmanJsBlog</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">App</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># This was automatically generated by the scaffold command</span>
</span><span class='line'>  <span class="nx">@resources</span> <span class="s">&#39;posts&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Change &#39;main#index&#39; to this, this is the landing page of the application</span>
</span><span class='line'>  <span class="c1"># We want to first display a list of all the posts</span>
</span><span class='line'>  <span class="nx">@root</span> <span class="s">&#39;posts#index&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nx">global</span> <span class="o">?</span> <span class="nb">window</span><span class="p">).</span><span class="nv">BatmanJsBlog = </span><span class="nx">BatmanJsBlog</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Post model should look like so:</p>

<figure class='code'><figcaption><span>app/assets/batman/models/post.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">Post</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Model</span>
</span><span class='line'>  <span class="vi">@resourceName: </span><span class="s">&#39;posts&#39;</span>
</span><span class='line'>  <span class="vi">@storageKey: </span><span class="s">&#39;posts&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># We are using Batman.js with Ruby on Rails...</span>
</span><span class='line'>  <span class="nx">@persist</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">RailsStorage</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Use @encode to tell batman.js which properties Rails will send back with its JSON.</span>
</span><span class='line'>  <span class="nx">@encode</span> <span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="s">&#39;content&#39;</span>
</span><span class='line'>  <span class="nx">@encodeTimestamps</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s generate the Comment model.</p>

<pre><code>rails g batman:model comment
</code></pre>

<figure class='code'><figcaption><span>app/assets/batman/models/comment.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">Comment</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Model</span>
</span><span class='line'>  <span class="vi">@resourceName: </span><span class="s">&#39;comments&#39;</span>
</span><span class='line'>  <span class="vi">@storageKey: </span><span class="s">&#39;comments&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@persist</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">RailsStorage</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Looks familiar...</span>
</span><span class='line'>  <span class="nx">@belongsTo</span> <span class="s">&#39;post&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Pretty much straightforward but we have to specify it</span>
</span><span class='line'>  <span class="nx">@urlNestsUnder</span> <span class="s">&#39;post&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@encode</span> <span class="s">&#39;content&#39;</span><span class="p">,</span> <span class="s">&#39;post_id&#39;</span>
</span><span class='line'>  <span class="nx">@encodeTimestamps</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now add the association on the Post model side.</p>

<figure class='code'><figcaption><span>app/assets/batman/models/post.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">Post</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">Model</span>
</span><span class='line'>  <span class="vi">@resourceName: </span><span class="s">&#39;posts&#39;</span>
</span><span class='line'>  <span class="vi">@storageKey: </span><span class="s">&#39;posts&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@persist</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">RailsStorage</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Here is the other part of the relation</span>
</span><span class='line'>  <span class="nx">@hasMany</span> <span class="s">&#39;comments&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@encode</span> <span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="s">&#39;content&#39;</span>
</span><span class='line'>  <span class="nx">@encodeTimestamps</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can go back to the main file and set the <strong>nested routes</strong> for posts and comments, which also looks like the syntax you find in a traditional Rails application.</p>

<figure class='code'><figcaption><span>app/assets/batman/batman_js_blog.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nx">BatmanJsBlog</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">App</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@resources</span> <span class="s">&#39;posts&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@resources</span> <span class="s">&#39;comments&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The controller</h3>

<p>Let&rsquo;s go edit the <strong>posts controller</strong> and create an <code>index</code> action to list all our posts.</p>

<figure class='code'><figcaption><span>app/assets/batman/controllers/posts_controller.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">PostsController</span> <span class="k">extends</span> <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">ApplicationController</span>
</span><span class='line'>  <span class="nv">routingKey: </span><span class="s">&#39;posts&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">index: </span><span class="nf">(params) -&gt;</span>
</span><span class='line'>    <span class="nx">@set</span><span class="p">(</span><span class="s">&#39;posts&#39;</span><span class="p">,</span> <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;all&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we are setting a <code>posts</code> variable when going through the <code>index</code> action that contains all our posts.<br/>
<code>BatmanJsBlog.Post.get('all')</code> is a query to our Rails API we created earlier.</p>

<blockquote><p>At any time, just open your browser dev tools to watch requests sent by Batman.js.</p></blockquote>

<p>Now we can modify our <strong>index</strong> view.</p>

<figure class='code'><figcaption><span>app/assets/batman/html/posts/index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;span</span> <span class="na">data-bind=</span><span class="s">&quot;&#39;post&#39; | pluralize posts.length&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">data-foreach-post=</span><span class="s">&quot;posts&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">data-bind=</span><span class="s">&quot;post.title&quot;</span> <span class="na">data-route=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;&lt;/a&gt;</span> |
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">data-event-click=</span><span class="s">&quot;destroy&quot;</span><span class="nt">&gt;</span>Destroy<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first line sets a binding to <code>pluralize</code> the word &ldquo;post&rdquo; depending on the number of posts being retrieved: <code>posts.length</code>.<br/>
Now look at this line <code>&lt;li data-foreach-post="posts"&gt;</code>. Here <code>data-foreach</code> will iterate through <code>posts</code> that have been set earlier in the controller and yield a <code>li</code>
tag for each of these posts. In every <code>li</code> block, a variable is used to hold the post object: <code>post</code> as in <code>data-foreach-post</code>.<br/>
<code>&lt;a data-bind="post.title" data-route="post"&gt;&lt;/a&gt;</code>: this is a link, again, the html value is set with <code>data-bind</code> and will be the post&rsquo;s title attribute.<br/>
<code>data-route</code> is used to set the <code>href</code> value of the link. Here <code>data-route="post"</code> means we are linking to the <code>show</code> action corresponding to the current <code>post</code>.<br/>
We also display a &ldquo;destroy&rdquo; link. In Batman.js, the <code>destroy</code> action is not routable so we have to use an event instead. The event name will be <code>destroy</code> and it will
be triggered on <code>click</code> on the link, therefore we have <code>data-event-click="destroy"</code>.</p>

<p>If you navigate to <a href="http://localhost:3000">http://localhost:3000</a> you should see the posts list.</p>

<p>Let&rsquo;s add our <strong>show</strong> action to the posts controller.</p>

<figure class='code'><figcaption><span>app/assets/batman/controllers/posts_controller.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="nv">show: </span><span class="nf">(params) -&gt;</span>
</span><span class='line'>  <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">find</span> <span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">@errorHandler</span> <span class="nf">(post) =&gt;</span>
</span><span class='line'>    <span class="nx">@set</span><span class="p">(</span><span class="s">&#39;post&#39;</span><span class="p">,</span> <span class="nx">post</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again <code>BatmanJsBlog.Post.find params.id</code> uses the given id in the request parameters to query our API. The result is stored in a <code>post</code> variable and set as a controller
attribute as usual with <code>@set</code>.</p>

<p>Now we can write the <strong>show</strong> view.</p>

<figure class='code'><figcaption><span>app/assets/batman/html/posts/show.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1</span> <span class="na">data-bind=</span><span class="s">&quot;post.title&quot;</span><span class="nt">&gt;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p</span> <span class="na">data-bind=</span><span class="s">&quot;post.content&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">data-route=</span><span class="s">&quot;routes.posts[post].edit&quot;</span><span class="nt">&gt;</span>Edit<span class="nt">&lt;/a&gt;</span> |
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">data-event-click=</span><span class="s">&quot;destroy&quot;</span><span class="nt">&gt;</span>Destroy<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">data-foreach-comment=</span><span class="s">&quot;post.comments&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">data-bind=</span><span class="s">&quot;comment.content&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything should look familiar now. We are using multiple data bindings to display our post&rsquo;s attributes. <code>routes.posts[post].edit</code> is used to route to the <strong>edit</strong> action
of a particular post.<br/>
Here we can also display the comments as they are returned in the JSON too: remember, earlier in this tutorial we included them in the API on the posts&#8217; <strong>show</strong> action with
<code>include: :comments</code>.</p>

<p>Go back to your application and click on one post: you should see the post&rsquo;s show view.</p>

<p>Now that we have seen the <code>destroy</code> event twice, we can handle it in the controller.</p>

<figure class='code'><figcaption><span>app/assets/batman/controllers/posts_controller.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="nv">destroy: </span><span class="nf">(node, event, context) -&gt;</span>
</span><span class='line'>  <span class="nv">post = </span><span class="k">if</span> <span class="nx">context</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;post&#39;</span><span class="p">)</span> <span class="k">then</span> <span class="nx">context</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;post&#39;</span><span class="p">)</span> <span class="k">else</span> <span class="nx">@post</span>
</span><span class='line'>  <span class="nx">post</span><span class="p">.</span><span class="nx">destroy</span> <span class="nf">(err) =&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span>
</span><span class='line'>      <span class="k">throw</span> <span class="nx">err</span> <span class="k">unless</span> <span class="nx">err</span> <span class="k">instanceof</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">ErrorsSet</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nx">@redirect</span> <span class="s">&#39;/posts&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first line instantiates our post.<br/>
As this is an event and not a route we have 3 arguments: <code>node, event, context</code>.<br/>
<code>node</code> represents the html node.<br/>
<code>event</code> represents the event that happenned.<br/>
<code>context</code> can help you access objects defined within a certain scope: here our node.</p>

<p>We linked to the <strong>destroy</strong> event at 2 different places: in the show where there is only one post defined (<code>@post</code>) and in the index where we use a loop to display multiple posts.
Depending which event was triggered, we have to fetch our post differently.<br/>
If <code>context.get('post')</code> exists then it means we are on the index view and we clicked &ldquo;destroy&rdquo; for one of our posts. This post is therefore available using context like this.<br/>
If it doesn&rsquo;t exist, then we are on the show view and <code>@post</code> is defined because it was defined in the <strong>show</strong> action with <code>@set('post', post)</code>.</p>

<p>Then, if everything goes well, we redirect to the <strong>index</strong> view in both cases.</p>

<p>Go ahead and try out these new &ldquo;destroy&rdquo; links: on the index and on the show views.</p>

<p>Now we should add some links on our layout to better the navigation.</p>

<figure class='code'><figcaption><span>app/views/layouts/batman.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Batman Js Blog<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>%= stylesheet_link_tag    &quot;application&quot;, :media =&gt; &quot;all&quot; %&gt;
</span><span class='line'>  <span class="err">&lt;</span>%= javascript_include_tag &quot;batman_js_blog&quot; %&gt;
</span><span class='line'>  <span class="err">&lt;</span>%= csrf_meta_tags %&gt;
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">data-route=</span><span class="s">&quot;routes.posts&quot;</span><span class="nt">&gt;</span>Posts<span class="nt">&lt;/a&gt;</span> |
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">data-route=</span><span class="s">&quot;routes.posts.new&quot;</span><span class="nt">&gt;</span>New Post<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">data-yield=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">run</span><span class="p">();</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are adding 2 links under the <code>body</code>.<br/>
The first one routes to the posts list: the <strong>index</strong> action of our <strong>posts controller</strong>.<br/>
The second one routes to the <strong>new</strong> action of our <strong>posts controller</strong> that we are now going to write.</p>

<p>The <strong>new</strong> action is pretty much straightforward too.</p>

<figure class='code'><figcaption><span>app/assets/batman/controllers/posts_controller.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">new</span><span class="o">:</span> <span class="nf">(params) -&gt;</span>
</span><span class='line'>  <span class="nx">@set</span><span class="p">(</span><span class="s">&#39;post&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">Post</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>We just create a new post, not saved yet.</p>

<p>Let&rsquo;s create a <strong>form</strong> on the new view now.</p>

<figure class='code'><figcaption><span>app/assets/batman/html/posts/new.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">data-formfor-post=</span><span class="s">&quot;post&quot;</span> <span class="na">data-event-submit=</span><span class="s">&quot;create&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label&gt;</span>Title:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">data-bind=</span><span class="s">&quot;post.title&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label&gt;</span>Content:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;textarea</span> <span class="na">data-bind=</span><span class="s">&quot;post.content&quot;</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;commit&quot;</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Submit&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As with <code>data-foreach</code>, <code>data-formfor</code> uses an existing variable and sets another one to be used within the context, both named &ldquo;post&rdquo;.<br/>
The form will just trigger an event, here the event is <strong>create</strong>, which corresponds to our <strong>create</strong> action (event) not yet defined.<br/>
We don&rsquo;t need any argument for this action.</p>

<figure class='code'><figcaption><span>app/assets/batman/controllers/posts_controller.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="nv">create: </span><span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">@post</span><span class="p">.</span><span class="nx">save</span> <span class="nf">(err, post) =&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span>
</span><span class='line'>      <span class="k">throw</span> <span class="nx">err</span> <span class="k">unless</span> <span class="nx">err</span> <span class="k">instanceof</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">ErrorsSet</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nx">@redirect</span> <span class="nx">post</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>@post</code> represents the post we created earlier in the <strong>new</strong> action.<br/>
We can save the post and redirect to the corresponding <strong>show</strong> action.</p>

<p>Now, go back to your browser and try creating a new post.</p>

<p>The <strong>edit</strong> action now is going to look quite like the <strong>show</strong> action because it only fetches a post with its id.</p>

<figure class='code'><figcaption><span>app/assets/batman/controllers/posts_controller.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="nv">show: </span><span class="nf">(params) -&gt;</span>
</span><span class='line'>  <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">find</span> <span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">@errorHandler</span> <span class="nf">(post) =&gt;</span>
</span><span class='line'>    <span class="nx">@set</span><span class="p">(</span><span class="s">&#39;post&#39;</span><span class="p">,</span> <span class="nx">post</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">edit: </span><span class="nf">(params) -&gt;</span>
</span><span class='line'>  <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">find</span> <span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">@errorHandler</span> <span class="nf">(post) =&gt;</span>
</span><span class='line'>    <span class="nx">@set</span><span class="p">(</span><span class="s">&#39;post&#39;</span><span class="p">,</span> <span class="nx">post</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s refactor and write a <code>fetchPost</code> method.</p>

<figure class='code'><figcaption><span>app/assets/batman/controllers/posts_controller.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">PostsController</span> <span class="k">extends</span> <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">ApplicationController</span>
</span><span class='line'>  <span class="nv">routingKey: </span><span class="s">&#39;posts&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@beforeAction</span> <span class="s">&#39;fetchPost&#39;</span><span class="p">,</span> <span class="nv">only: </span><span class="p">[</span><span class="s">&#39;show&#39;</span><span class="p">,</span> <span class="s">&#39;edit&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">show: </span><span class="nf">(params) -&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">edit: </span><span class="nf">(params) -&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">fetchPost: </span><span class="nf">(params) -&gt;</span>
</span><span class='line'>    <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">find</span> <span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">@errorHandler</span> <span class="nf">(post) =&gt;</span>
</span><span class='line'>      <span class="nx">@set</span><span class="p">(</span><span class="s">&#39;post&#39;</span><span class="p">,</span> <span class="nx">post</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, the <code>@beforeAction</code> works exactly like Rails&#8217; one does. It executes <code>fetchPost</code> before the <strong>show</strong> and <strong>edit</strong> actions.</p>

<p>Again the <strong>edit</strong> view looks like the <strong>new</strong> view.</p>

<figure class='code'><figcaption><span>app/assets/batman/html/posts/edit.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">data-formfor-post=</span><span class="s">&quot;post&quot;</span> <span class="na">data-event-submit=</span><span class="s">&quot;update&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label&gt;</span>Title:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">data-bind=</span><span class="s">&quot;post.title&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label&gt;</span>Content:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;textarea</span> <span class="na">data-bind=</span><span class="s">&quot;post.content&quot;</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;commit&quot;</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Submit&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only difference is the event triggered: here it is <code>update</code>.</p>

<p>Let&rsquo;s refactor both our <strong>edit</strong> and <strong>new</strong> views using a partial.</p>

<figure class='code'><figcaption><span>app/assets/batman/html/posts/edit.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">data-formfor-post=</span><span class="s">&quot;post&quot;</span> <span class="na">data-event-submit=</span><span class="s">&quot;update&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">data-partial=</span><span class="s">&quot;posts/_form&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/assets/batman/html/posts/new.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">data-formfor-post=</span><span class="s">&quot;post&quot;</span> <span class="na">data-event-submit=</span><span class="s">&quot;create&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">data-partial=</span><span class="s">&quot;posts/_form&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think you get it here without explanations&hellip; Just create the <strong>_form</strong> partial.</p>

<figure class='code'><figcaption><span>app/assets/batman/html/posts/_form.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;label&gt;</span>Title:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">data-bind=</span><span class="s">&quot;post.title&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;label&gt;</span>Content:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;textarea</span> <span class="na">data-bind=</span><span class="s">&quot;post.content&quot;</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;commit&quot;</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Submit&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, the <strong>update</strong> action looks exactly like the <strong>create</strong> action.</p>

<figure class='code'><figcaption><span>app/assets/batman/controllers/posts_controller.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="nv">update: </span><span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">@post</span><span class="p">.</span><span class="nx">save</span> <span class="nf">(err, post) =&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span>
</span><span class='line'>      <span class="k">throw</span> <span class="nx">err</span> <span class="k">unless</span> <span class="nx">err</span> <span class="k">instanceof</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">ErrorsSet</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nx">@redirect</span> <span class="nx">post</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should be able to edit your posts thanks to the previously created link in the show view now.</p>

<h3>The comments</h3>

<p>Let&rsquo;s add a link to destroy our comments on the posts&#8217; show view.</p>

<figure class='code'><figcaption><span>app/assets/batman/html/posts/show.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">data-foreach-comment=</span><span class="s">&quot;post.comments&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">data-bind=</span><span class="s">&quot;comment.content&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">data-event-click=</span><span class="s">&quot;destroyComment&quot;</span><span class="nt">&gt;</span>Destroy<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The event triggered by the link will be <code>destroyComment</code> as we are still in the posts controller and the <code>destroy</code> action (event) is already used to destroy a post. It would
probably be messy to use the same event.</p>

<p>Let&rsquo;s write this new event.</p>

<figure class='code'><figcaption><span>app/assets/batman/controllers/posts_controller.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">destroyComment: </span><span class="nf">(node, event, context) -&gt;</span>
</span><span class='line'>  <span class="nv">comment = </span><span class="nx">context</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;comment&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">comment</span><span class="p">.</span><span class="nx">destroy</span> <span class="nf">(err) =&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span>
</span><span class='line'>      <span class="k">throw</span> <span class="nx">err</span> <span class="k">unless</span> <span class="nx">err</span> <span class="k">instanceof</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">ErrorsSet</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nx">@post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;comments&#39;</span><span class="p">).</span><span class="nx">remove</span> <span class="nx">comment</span>
</span><span class='line'>      <span class="nx">@redirect</span> <span class="s">&#39;/posts/&#39;</span> <span class="o">+</span> <span class="nx">@post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we get the <code>comment</code> using the context.<br/>
If everything goes well, we also remove the comment from the post&rsquo;s comments list so that the comment disappears (on the html page).<br/>
And then we redirect on the post&rsquo;s <strong>show</strong> view i.e. where we were when clicking the destroy link.</p>

<p>Go ahead and try it.</p>

<p>Now let&rsquo;s add the possibility to create a new comment on every post show view.</p>

<figure class='code'><figcaption><span>app/assets/batman/html/posts/show.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;form</span> <span class="na">data-formfor-comment=</span><span class="s">&quot;comment&quot;</span> <span class="na">data-event-submit=</span><span class="s">&quot;createComment&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label&gt;</span>Content:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;textarea</span> <span class="na">data-bind=</span><span class="s">&quot;comment.content&quot;</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;commit&quot;</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Submit&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then just get the controller right.</p>

<figure class='code'><figcaption><span>app/assets/batman/controllers/posts_controller.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="nv">show: </span><span class="nf">(params) -&gt;</span>
</span><span class='line'>  <span class="c1"># Initializing a new comment with the post_id given in params to display</span>
</span><span class='line'>  <span class="c1"># a corresponding form</span>
</span><span class='line'>  <span class="nx">@set</span><span class="p">(</span><span class="s">&#39;comment&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">Comment</span><span class="p">(</span><span class="nv">post_id: </span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="nv">createComment: </span><span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">@comment</span><span class="p">.</span><span class="nx">save</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="c1"># If everything goes well, we add the new comment to the current post&#39;s comments list so that it appears on the (html) page</span>
</span><span class='line'>    <span class="nx">@post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;comments&#39;</span><span class="p">).</span><span class="nx">add</span> <span class="nx">@comment</span>
</span><span class='line'>    <span class="nx">@redirect</span> <span class="s">&#39;/posts/&#39;</span> <span class="o">+</span> <span class="nx">@post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should now be able to create new comments. ; )</p>

<h3>Errors handling</h3>

<p>We can now add some information when validations fail for posts.</p>

<p>You can add this at the top of the <strong>new</strong> and <strong>edit</strong> views.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">data-partial=</span><span class="s">&quot;posts/_errors&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And create the corresponding partial.</p>

<figure class='code'><figcaption><span>app/assets/batman/html/posts/_errors.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">data-showif=</span><span class="s">&quot;post.errors.length&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">data-bind=</span><span class="s">&quot;&#39;error&#39; | pluralize post.errors.length&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'>    prevented this post from being created:
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">data-bind=</span><span class="s">&quot;error.message&quot;</span> <span class="na">data-foreach-error=</span><span class="s">&quot;post.errors&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first line means the <code>div</code> is displayed only if there are errors included within the post.<br/>
Take a look at the <code>li</code> tag, and see how we took advantage of <code>data-bind</code> combined with <code>data-foreach</code> here.</p>

<p>If validations fail, Rails sends back the object with errors included in the JSON. But we could also take advantages of Batman.js capabilities and add some validations on
the client side.</p>

<figure class='code'><figcaption><span>app/assets/batman/models/post.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="nx">@validate</span> <span class="s">&quot;title&quot;</span><span class="p">,</span>   <span class="nv">presence: </span><span class="kc">true</span>
</span><span class='line'><span class="nx">@validate</span> <span class="s">&quot;content&quot;</span><span class="p">,</span> <span class="nv">presence: </span><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now Batman.js knows how to validate our post objects and does not need to send a request to Rails and wait for a reply before showing the errors: it can display them right away.</p>

<p>You can try creating an empty post and see what happens. : )</p>

<p>As a recap for this last part, your <strong>posts_controller</strong> should look like this:</p>

<figure class='code'><figcaption><span>app/assets/batman/controllers/posts_controller.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">PostsController</span> <span class="k">extends</span> <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">ApplicationController</span>
</span><span class='line'>  <span class="nv">routingKey: </span><span class="s">&#39;posts&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">@beforeAction</span> <span class="s">&#39;fetchPost&#39;</span><span class="p">,</span> <span class="nv">only: </span><span class="p">[</span><span class="s">&#39;show&#39;</span><span class="p">,</span> <span class="s">&#39;edit&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">index: </span><span class="nf">(params) -&gt;</span>
</span><span class='line'>    <span class="nx">@set</span><span class="p">(</span><span class="s">&#39;posts&#39;</span><span class="p">,</span> <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;all&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">show: </span><span class="nf">(params) -&gt;</span>
</span><span class='line'>    <span class="nx">@set</span><span class="p">(</span><span class="s">&#39;comment&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">Comment</span><span class="p">(</span><span class="nv">post_id: </span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">edit: </span><span class="nf">(params) -&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">new</span><span class="o">:</span> <span class="nf">(params) -&gt;</span>
</span><span class='line'>    <span class="nx">@set</span><span class="p">(</span><span class="s">&#39;post&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">Post</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">create: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@post</span><span class="p">.</span><span class="nx">save</span> <span class="nf">(err, post) =&gt;</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span>
</span><span class='line'>        <span class="k">throw</span> <span class="nx">err</span> <span class="k">unless</span> <span class="nx">err</span> <span class="k">instanceof</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">ErrorsSet</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nx">@redirect</span> <span class="nx">post</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">update: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@post</span><span class="p">.</span><span class="nx">save</span> <span class="nf">(err, post) =&gt;</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span>
</span><span class='line'>        <span class="k">throw</span> <span class="nx">err</span> <span class="k">unless</span> <span class="nx">err</span> <span class="k">instanceof</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">ErrorsSet</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nx">@redirect</span> <span class="nx">post</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">destroy: </span><span class="nf">(node, event, context) -&gt;</span>
</span><span class='line'>    <span class="nv">post = </span><span class="k">if</span> <span class="nx">context</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;post&#39;</span><span class="p">)</span> <span class="k">then</span> <span class="nx">context</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;post&#39;</span><span class="p">)</span> <span class="k">else</span> <span class="nx">@post</span>
</span><span class='line'>    <span class="nx">post</span><span class="p">.</span><span class="nx">destroy</span> <span class="nf">(err) =&gt;</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span>
</span><span class='line'>        <span class="k">throw</span> <span class="nx">err</span> <span class="k">unless</span> <span class="nx">err</span> <span class="k">instanceof</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">ErrorsSet</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nx">@redirect</span> <span class="s">&#39;/posts&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">createComment: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@comment</span><span class="p">.</span><span class="nx">save</span> <span class="o">=&gt;</span>
</span><span class='line'>      <span class="nx">@post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;comments&#39;</span><span class="p">).</span><span class="nx">add</span> <span class="nx">@comment</span>
</span><span class='line'>      <span class="nx">@redirect</span> <span class="s">&#39;/posts/&#39;</span> <span class="o">+</span> <span class="nx">@post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">destroyComment: </span><span class="nf">(node, event, context) -&gt;</span>
</span><span class='line'>    <span class="nv">comment = </span><span class="nx">context</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;comment&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">comment</span><span class="p">.</span><span class="nx">destroy</span> <span class="nf">(err) =&gt;</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span>
</span><span class='line'>        <span class="k">throw</span> <span class="nx">err</span> <span class="k">unless</span> <span class="nx">err</span> <span class="k">instanceof</span> <span class="nx">Batman</span><span class="p">.</span><span class="nx">ErrorsSet</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nx">@post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;comments&#39;</span><span class="p">).</span><span class="nx">remove</span> <span class="nx">comment</span>
</span><span class='line'>        <span class="nx">@redirect</span> <span class="s">&#39;/posts/&#39;</span> <span class="o">+</span> <span class="nx">@post</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">fetchPost: </span><span class="nf">(params) -&gt;</span>
</span><span class='line'>    <span class="nx">BatmanJsBlog</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">find</span> <span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">@errorHandler</span> <span class="nf">(post) =&gt;</span>
</span><span class='line'>      <span class="nx">@set</span><span class="p">(</span><span class="s">&#39;post&#39;</span><span class="p">,</span> <span class="nx">post</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope it all helps, talk to you later! ; )</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I love my development environment]]></title>
    <link href="http://requiremind.com/why-i-love-my-development-environment"/>
    <updated>2013-07-29T20:08:00+02:00</updated>
    <id>http://requiremind.com/why-i-love-my-development-environment</id>
    <content type="html"><![CDATA[<p>Today I&rsquo;ve decided to talk about the tools I use on a day-to-day basis. Why? Because I love them. That&rsquo;s it, now you know that I&rsquo;m not going to be objective. This being
said, if you don&rsquo;t know or havn&rsquo;t tried them yet, then maybe now is a good time to do so and make your own opinion about it.</p>

<!-- more -->


<p>Note: I&rsquo;m using Ubuntu with gnome but most of the stuff I talk about is working on OS X too.</p>

<p>But enough talking&hellip; : p</p>

<h3>Z</h3>

<p>z&hellip; yes this is its name. z is probably one of the most useful things I&rsquo;ve discovered the past year. z is actually a script that remembers where you&rsquo;ve <code>cd</code> for the past
x days/weeks/months (I don&rsquo;t know the threshold) and saves you a tremendous amount of time.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /home/neil/dev/prism_secret_project</span></code></pre></td></tr></table></div></figure>


<p>Here I&rsquo;m using the <code>cd</code> command as usual (well at least if you&rsquo;re not using zsh, but we&rsquo;ll get to that later) to enter my <em>prism_secret_project/</em> directory. Now that I&rsquo;ve done
this once, z is aware of that directory. I can just type</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>z pris</span></code></pre></td></tr></table></div></figure>


<p>for instance, hit <code>tab</code> and z will autocomplete my command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>z /home/neil/dev/prism_secret_project</span></code></pre></td></tr></table></div></figure>


<p>At this point you just have to hit <code>Enter</code> to navigate to that directory.</p>

<p>You probably get it by now, z is some sort of fuzzy matching tool for navigating on your os.</p>

<p>Here you will find the script and the installation instructions: <a href="https://github.com/rupa/z">https://github.com/rupa/z</a>.</p>

<h3>zsh with oh-my-zsh</h3>

<p>zsh stands for Z Shell and replaces the default shell (bash).
Let&rsquo;s see what we can do with it.</p>

<p>First you do not need to use <code>cd</code> anymore. Typing a directory name as a command and hitting <code>tab</code> or <code>Enter</code> is now enough to navigate.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/home/neil/dev/prism_secret_project</span></code></pre></td></tr></table></div></figure>


<p>Just hit <code>Enter</code> and you&rsquo;ll be there.
You don&rsquo;t have to hit <code>tab</code> to autocomplete each directory, you can just type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/h/n/d/pr
</span><span class='line'># =&gt; hit tab here
</span><span class='line'>/home/neil/dev/prism_secret_project</span></code></pre></td></tr></table></div></figure>


<p>zsh will offer suggestions when you hit <code>tab</code> and when multiple directories/commands match what you&rsquo;ve typed. What comes in handy here is that you can actually navigate through
these suggestions with the arrow keys.</p>

<p>When you make a typo, zsh will try and find the closest command. For instance if you type something like <code>lls</code> instead of <code>ls</code>&hellip;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lls
</span><span class='line'>zsh: correct 'lls' to 'ls' [nyae]?</span></code></pre></td></tr></table></div></figure>


<p>Here you have four choices: no, yes, abort, edit. No will continue and execute the previously entered command. Yes will use the suggestion. Abort will just abort
everything (pretty much straightforward huh) and edit will allow you to edit your command if you wanted to type something similar.</p>

<p>With <em>oh-my-zsh</em> you&rsquo;ll be able to get a cool terminal theme and syntax highlighting.
You&rsquo;ll also be able to see all the time the git branch you&rsquo;re currently using on your prompt:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-&gt; requiremind.github.io git:(source)</span></code></pre></td></tr></table></div></figure>


<p><em>oh-my-zsh</em> brings with him a great number of plugins and really handy aliases.
For instance when I&rsquo;m using git I always use these commands instead of the old ones:</p>

<ul>
<li><code>gst</code> for <code>git status</code></li>
<li><code>gp</code> for <code>git push</code></li>
<li><code>gl</code> for <code>git pull</code></li>
<li><code>gco</code> for <code>git checkout</code></li>
</ul>


<p>Some say that zsh can make coffee but I havn&rsquo;t tried yet&hellip;</p>

<p>You should not have any problem finding installation instructions for zsh, here is the page you&rsquo;ll be looking for if you think about using <em>oh-my-zsh</em>:
<a href="https://github.com/robbyrussell/oh-my-zsh">https://github.com/robbyrussell/oh-my-zsh</a>.</p>

<h3>Sublime Text</h3>

<p>I won&rsquo;t go into details here, there are already plenty of blog posts that talk about Sublime Text and the whys and hows as to why it works wonders. So I&rsquo;m just gonna
give you the main &ldquo;shortcuts&rdquo; I use that made me first like the editor and then love it.</p>

<ul>
<li>you can actually <code>ctrl + click</code> on your document to place multiple cursors and edit multiple things the same way and at the same time</li>
<li>select some text and then hit <code>ctrl + d</code> multiple times: this will highlight all the occurencies of that text in the document allowing a quick edit again</li>
<li>use <code>ctrl + c</code> to copy the current line directly, <code>ctrl + v</code> to paste it above the line you&rsquo;re at, use <code>ctrl + x</code> to cut the line and <code>ctrl + l</code> to select it</li>
<li>use <code>ctrl + shift + up/down</code> to move the line</li>
<li>use <code>ctrl + p</code> to fuzzy open documents</li>
<li>use <code>ctrl + shift + p</code> then type <em>ssjs</em> and hit <code>Enter</code> to set the current highlighting to javascript for instance (<em>Set Syntax: JavaScript</em>)</li>
</ul>


<p>And some more advantages:</p>

<ul>
<li>you can set a layout with one to four columns and one to four rows</li>
<li>when you click on a file, you get to see a preview of that file without having to open it</li>
</ul>


<p>That&rsquo;s it for today! : )</p>

<p>Don&rsquo;t hesitate to share your tips below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improve your workflow with Git Flow]]></title>
    <link href="http://requiremind.com/improve-your-workflow-with-git-flow"/>
    <updated>2013-07-06T14:58:00+02:00</updated>
    <id>http://requiremind.com/improve-your-workflow-with-git-flow</id>
    <content type="html"><![CDATA[<p>You&rsquo;re using Git on a day-to-day basis, but you often feel lost or your branching model looks like a spaghetti bowl?
Let me introduce you a perfect tool to end your headaches. It&rsquo;s Git Flow, it will help you by keeping a perfect branching model and make your team happy.</p>

<!-- more -->


<p><img class="center" src="http://requiremind.com/images/gitflow/spaghetti-head.jpg" width="350" height="350" title="spaghetti bowl" alt="spaghetti bowl"></p>

<p class="text-center small-text">Don&#8217;t cry little boy, Git Flow to the rescue, keep reading.</p>


<h3>Git</h3>

<p>Ok, so first I assume that if you still reading this, you know what is <code>git</code>. In a nutshell, <code>git</code> is a version controlled system which you can use to maintain code for your project. Through it the collaboration with your team and the versioning is made easier.</p>

<p><code>git</code> contains an interesting feature called <code>branching</code>. It allows you to create different lines of development with independant history and evolution. You can see this as a copy of your working directory and you continue your work in this new copy.</p>

<blockquote><p>Got it, I use Git and I already know that, where is the problem?</p></blockquote>

<p>At this point, there is not.
The problem occurs when you start having a lot (plenty?) of branches. You could easily get lost and don&rsquo;t know what is up to date, what should be merged, is the master branch synchronized with the release branch and many many more questions.</p>

<p>For instance, you find a bug on your production site. You want to fix this as quickly as possible. To do so, you modify the code on master branch and push it back onto production. This is great, but this fix is now lost only on the master branch and won&rsquo;t be replicated on the other branchs.</p>

<p>That&rsquo;s why <a href="http://nvie.com">@nvie</a> published an article of a <a href="http://nvie.com/posts/a-successful-git-branching-model">&ldquo;Successful Git branching model&rdquo;</a> which explain, for me, the best branching model we can use for both private and work projects.</p>

<h3>Git branching model</h3>

<p>I truly suggest you to read his article. It worth it.</p>

<p>But the main idea to keep in mind, is that there is branches with specific roles and all of these stay consistent and perfectly synchronized.</p>

<p>In a few words, you have a master branch containing the production code, then you have a develop branch that allows you to create different features from it. When a feature is done, you merge it back onto the develop branch. When a set of features are closed, you can then create a release branch to be sure that everything is ok and finally, merge it into master.</p>

<p>If you really understand this model then everything will be easier and maintenable over the time on your projects.
The only problem remaining is that you can easily made mistakes by using <code>git</code> and these mistakes can break the workflow.</p>

<h3>Git Flow to the rescue!</h3>

<p><a href="https://github.com/nvie/gitflow">Git Flow</a> is a tool created by <a href="http://nvie.com">@nvie</a> (again!). It&rsquo;s a collection of Git extensions that help us to follow his model really easily.</p>

<h4>Installation</h4>

<p>You can find some instructions <a href="https://github.com/nvie/gitflow/wiki/Installation">here</a> about how to install it on your plateform.</p>

<h4>Init</h4>

<p>Once the instalation is done you can apply the branching model to a new directory or convert an existing one by entering the following in your console:</p>

<pre><code>git flow init
</code></pre>

<p>Then, it will ask you some questions about your naming convention. I suggest you to keep the default one, so just press <code>Enter</code> on each questions. (To avoid this step, enter <code>git flow init -d</code> on the previous command, it will accept all defaults).</p>

<pre><code>No branches exist yet. Base branches must be created now.
Branch name for production releases: [master] 
Branch name for "next release" development: [develop] 

How to name your supporting branch prefixes?
Feature branches? [feature/] 
Release branches? [release/] 
Hotfix branches? [hotfix/] 
Support branches? [support/] 
Version tag prefix? [] 
</code></pre>

<p>Cool, Git Flow is now ready to use. As you can notice you&rsquo;re on the develop branch.
As it specified on the workflow, all your development should now start from this branch.
Let&rsquo;s start using Git Flow</p>

<h4>Use cases</h4>

<p>Let&rsquo;s say that you want to start a new feature, for instance a contact form:</p>

<pre><code>git flow feature start contactForm
</code></pre>

<p>Behind the scenes, Git Flow will create a new branch called <code>feature/contactForm</code> and set it as the current working branch. From there you can continue to work as usual. You code, commit, code, commit, take a tea, code, commit..
Once your job on this feature is done, just finish it.</p>

<pre><code>git flow feature finish contactForm
</code></pre>

<p>In the background, Git Flow just merged your changes back to develop and removed your feature branch.</p>

<p>You can do the same process with other kind of branches like: release, support or hotfix. The behavior won&rsquo;t be the same depending on which one you choose.</p>

<p>For instance, let&rsquo;s talk about hotfix. You can start it as you&rsquo;ve done for a feature:</p>

<pre><code>git flow hotfix start 1.0.3
</code></pre>

<p>This time, it will create a branch based on master. Then you fix what’s wrong on your code. Once you&rsquo;ve dealt with it:</p>

<pre><code>git flow hotfix finish 1.0.3
</code></pre>

<p>It will merge this hotfix into master AND into develop too. It also add a tag to your branch for an easier versioning of your project and it erase this hotfix branch.
As the merge is done on both master and develop you don&rsquo;t have to worry about your master being ahead of you develop branch.</p>

<p><img class="center" src="http://requiremind.com/images/gitflow/aligned_pasta.jpg" width="350" height="350" title="aligned pasta" alt="aligned pasta"></p>

<p>To conclude, Git Flow is a really great tool to apply a consistent and robust branching model. And another good point, it&rsquo;s open source! You can find it <a href="https://github.com/nvie/gitflow">here</a>.</p>

<p>I hope you&rsquo;re going to add this tool to your workflow and appreciate it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Differences between has_one and belongs_to in Ruby on Rails]]></title>
    <link href="http://requiremind.com/differences-between-has-one-and-belongs-to-in-ruby-on-rails"/>
    <updated>2013-06-29T16:42:00+02:00</updated>
    <id>http://requiremind.com/differences-between-has-one-and-belongs-to-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>When getting started with Ruby on Rails, associations between models can become quite confusing especially when there&rsquo;s a thin line between two of them.</p>

<!-- more -->


<p>At first we&rsquo;re tempted to use the one that makes more sense when thinking about it&hellip; For instance we can say that a <em>page</em> belongs to a <em>book</em>, but we could say that a
<em>page</em> has one <em>book</em> too. The two of them establish a one-to-one association between both models.</p>

<p>But the question we need to ask ourselves here is: <strong>in which model do I want the foreign key to be?</strong> In fact, this is the slight difference between <code>has_one</code> and
<code>belongs_to</code> in Ruby on Rails.</p>

<p><strong><code>belongs_to</code> will place the foreign key in the declaring model whereas <code>has_one</code> will place it in the other model.</strong></p>

<p>Let&rsquo;s see some examples, first using <code>belongs_to</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Page</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:book</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will use a <strong>book_id</strong> field in the <em>pages</em> table (note: of course you need to add that field with a migration).
It also adds 4 methods in the Page class: <code>book</code>, <code>book=</code>, <code>build_book</code>, <code>create_book</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">page</span> <span class="o">=</span> <span class="no">Page</span><span class="o">.</span><span class="n">create!</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Page id: 1, book_id: nil&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">create!</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Book id: 1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">page</span><span class="o">.</span><span class="n">book</span> <span class="o">=</span> <span class="n">book</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Book id: 1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">page</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Page id: 1, book_id: 1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">other_book</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">create_book!</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Book id: 2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">page</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Page id: 1, book_id: 2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">page</span><span class="o">.</span><span class="n">book</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Book id: 2&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make this a one-to-many association just declare the other side of it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:pages</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Page</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:book</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now a book has many pages (and each page still belongs to a book) and you can use the usual methods on the book:
<code>pages</code>, <code>pages&lt;&lt;</code>, <code>pages.find</code>, <code>pages.build</code>, <code>pages.create</code> and many more.</p>

<p>If we use a <code>has_one</code> association, here what happens:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Page</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:book</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here are some examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">page</span> <span class="o">=</span> <span class="no">Page</span><span class="o">.</span><span class="n">create!</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Page id: 1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">create!</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Book id: 1, page_id: nil&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">page</span><span class="o">.</span><span class="n">book</span> <span class="o">=</span> <span class="n">book</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Book id: 1, page_id: 1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">other_book</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">create_book!</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Book id: 2, page_id: 1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will probably want to set the other side of the association at some point.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:page</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Page</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:book</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But that way a book can only have one page&hellip;</p>

<p>To sum things up: use <code>belongs_to</code> when you want the foreign key in the declaring model, use <code>has_one</code> if you want it on the other model.</p>

<p>But anyway, you will rarely see a <code>belongs_to</code> or a <code>has_one</code> used alone. Most of the time it will be <code>has_many</code> with <code>belongs_to</code> for a one-to-many
association and <code>has_one</code> with <code>belongs_to</code> for a one-to-one association.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Riding Rails 4 along with Mongoid and Ruby 2.0]]></title>
    <link href="http://requiremind.com/riding-rails-4-along-with-mongoid-and-ruby-2-dot-0"/>
    <updated>2013-05-26T01:38:00+02:00</updated>
    <id>http://requiremind.com/riding-rails-4-along-with-mongoid-and-ruby-2-dot-0</id>
    <content type="html"><![CDATA[<p>You&rsquo;re not without knowing that Rails 4 is about to kick in in a few days (weeks?), are you? In a recent hobby project of mine: <a href="https://6lock.com">6LOCK</a>,
I tested out MongoDB, together with Mongoid (the ORM that comes in replacement of ActiveRecord for querying the MongoDB database) and other pretty cool stuff. As I had a great time using it
I wanted to give it a try using the all new and shiny Rails 4 and Ruby 2.</p>

<!-- more -->


<p>If you have a basic understanding of how the framework works, you have already been following some sort of &ldquo;Getting Started with Ruby on Rails&rdquo; tutorial (plenty of them out there)
and now you want to try MongoDB and see how it feels, this tutorial is made for you.</p>

<p>Note: I am not going to list the new features of Rails 4, if you want to know more, check out this great post:
<a href="http://net.tutsplus.com/tutorials/ruby/digging-into-rails-4/">digging-into-rails-4</a></p>

<p>All the resources and documentation stuff are at the end of the post, be sure to check them out, you&rsquo;ll probably learn very interesting stuff and subtleties.</p>

<p>I ran into some compatibility issues when writing this tutorial (nothing to be worried about) but gems versions may now have evolved.<br/>
FYI: Ubuntu 12.10, rails 4.0.0.rc1, mongoid (github master, something between 3.1.4 and ?) and bson_ext 1.8.6</p>

<p>EDIT: as stated by Shunwen in the comments below, bson_ext seems to no longer be required as of mongoid version 3. Check it out here: <a href="http://mongoid.org/en/mongoid/docs/upgrading.html">http://mongoid.org/en/mongoid/docs/upgrading.html</a>.</p>

<p>Application github repo: <a href="https://github.com/Raindal/rails4_mongoid">https://github.com/Raindal/rails4_mongoid</a></p>

<p>Finally, I am not going to give you any advice on why you should or should not use MongoDB, lots of topics are listing pros and cons compared to traditional relational databases such as
MySQL. To give you some leads you could dig into, MongoDB brings to the table things like dynamic fields, embedding, map/reduce, indexing and so on.</p>

<p>But enough talking, let&rsquo;s dive in!</p>

<h3>Install MongoDB</h3>

<blockquote><p><a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/">Install MongoDB on Ubuntu</a></p></blockquote>

<p>First you&rsquo;ll need to import the 10gen public GPG key (MongoDB is mainly maintained by 10gen), which is used to ensure package consistency and authenticity</p>

<pre><code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10
</code></pre>

<p>Create a /etc/apt/sources.list.d/10gen.list file using the following command</p>

<pre><code>echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/10gen.list
</code></pre>

<p>Now you can update your repository</p>

<pre><code>sudo apt-get update
</code></pre>

<p>And then install the package</p>

<pre><code>sudo apt-get install mongodb-10gen
</code></pre>

<p>To check that it works, just issue a <code>mongo</code> in your shell and you should see something like</p>

<pre><code>MongoDB shell version: x.x.x
connecting to: test
&gt;
</code></pre>

<h3>Set up RVM</h3>

<blockquote><p><a href="http://net.tutsplus.com/tutorials/why-you-should-use-rvm/">Why you should use RVM</a></p></blockquote>

<p>Now we are going to set up RVM to use Ruby 2.0.0. We only have to install the Ruby version we want and use it.</p>

<pre><code>rvm install 2.0.0
rvm use 2.0.0
</code></pre>

<p>And finally we are going to create a gemset for our application, it will contain all the gems we need</p>

<pre><code>rvm gemset create rails4_mongoid
</code></pre>

<h3>Set up the application</h3>

<p>First we need to install the Rails 4 gem.</p>

<pre><code>gem install rails --version 4.0.0.rc1 --no-ri --no-rdoc
</code></pre>

<p>Now we can create the application and cd inside</p>

<pre><code>rails new rails4_mongoid
cd rails4_mongoid/
</code></pre>

<p>For convinience, we are creating a .rvmrc file at the root of our application. The file will tell RVM to use the right version of Ruby with the right gemset when we cd inside the directory.<br/>
Just use your favorite text editor</p>

<pre><code>nano .rvmrc
</code></pre>

<p>And paste this inside</p>

<figure class='code'><figcaption><span>.rvmrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rvm</span> <span class="n">use</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="vi">@rails4_mongoid</span> <span class="o">--</span><span class="n">create</span>
</span></code></pre></td></tr></table></div></figure>


<p>This basically tells RVM to use Ruby 2.0.0 with the gemset rails4_mongoid and that it should create the gemset if it doesn&rsquo;t already exist.</p>

<p>To make sure everything works as expected, you can go back and then cd again in the directory.</p>

<pre><code>cd ..
cd rails4_mongoid
</code></pre>

<p>You should see something like this</p>

<pre><code>Using /home/neil/.rvm/gems/ruby-2.0.0-p0 with gemset rails4_mongoid
</code></pre>

<p>Now, we have to edit the Gemfile to install the gems we want.<br/>
First, remove sqlite: delete these lines</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Use sqlite3 as the database for Active Record</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can add mongoid and bson_ext</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;mongoid&#39;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span> <span class="s1">&#39;mongoid/mongoid&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;bson_ext&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.8.6&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>At the time I&rsquo;m writing these lines, <a href="http://rubygems.org/gems/mongoid/versions/3.1.4">mongoid 3.1.4 relies on ActiveModel 3.2</a> but we are using ActiveModel 4.0.0-rc1, so we need to use directly
the github repo that supports it.<br/>
bson_ext is a C extension which basically makes things faster with MongoDB.</p>

<p>Now, just run a</p>

<pre><code>bundle update
</code></pre>

<p>If you run into errors of some kind (mine was related to bson_ext), try to update your gem version with</p>

<pre><code>rvm rubygems latest --verify-downloads 1
</code></pre>

<p>And <code>bundle update</code> again.</p>

<h3>Configure Mongoid</h3>

<p>Still in the root of the application, run the following command</p>

<pre><code>rails g mongoid:config
</code></pre>

<p>This will generate a <strong>mongoid.yml</strong> file under <strong>config/</strong>.<br/>
We can edit the file to suit our needs.</p>

<p>Find the line that says <code># consistency: :eventual</code> and change it for</p>

<figure class='code'><figcaption><span>config/mongoid.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">consistency</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">:strong</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>:eventual</code> will send reads to secondaries, <code>:strong</code> sends everything to master.</p>

<p>As we are not using ActiveRecord, we need to get rid of it.<br/>
First in <strong>config/application.rb</strong> comment out the line</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># require &#39;rails/all&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And add these lines right underneath the first one</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;action_controller/railtie&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;action_mailer/railtie&quot;</span>
</span><span class='line'><span class="c1"># require &quot;active_resource/railtie&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;sprockets/railtie&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The 3rd line is commented out because normally you would need it but Rails 4 has extracted the ActiveResource gem and now you need to specify its name in the Gemfile if you want to use it. But here we won&rsquo;t
use it.</p>

<p>There are some more ActiveRecord settings we have to get rid of out there.<br/>
In <strong>config/environments/development.rb</strong>, comment out this line</p>

<figure class='code'><figcaption><span>config/environments/development.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config.active_record.migration_error = :page_load</span>
</span></code></pre></td></tr></table></div></figure>


<p>To check that everything is working like a charm, run a <code>rails s</code> and then go check that the application is running on <a href="http://localhost:3000">http://localhost:3000</a>.</p>

<p>Now you should see the usual <strong>Welcome aboard</strong> message.</p>

<h3>Now we&rsquo;re talking!</h3>

<p>Let&rsquo;s write some code, finally! But first we will have to generate our first model. For that we are going to use the builtin <em>scaffold</em> command in order to generate our model, controller,
views and everything else at the same time.</p>

<blockquote><p>In a real project, unless you&rsquo;re sure you&rsquo;re going to use all the generated files, I personnaly don&rsquo;t recommend using the scaffold command. You could quickly end up with a messy application.
I would rather recommend using each command one by one: <code>rails g model xxx</code>, <code>rails g controller xxx</code> etc.</p></blockquote>

<p>For this example I&rsquo;ll be using the usual Post > Comment stuff which is actually a perfect example for demonstrating the embedding capabilities of MongoDB.</p>

<p>Let&rsquo;s generate our Post first, it will have 3 fields: a <strong>title</strong>, a <strong>body</strong> and it can be <strong>starred</strong>.</p>

<pre><code>rails g scaffold post title:string body:string starred:boolean
</code></pre>

<blockquote><p><a href="http://mongoid.org/en/mongoid/docs/documents.html#fields">Mongoid document field types</a></p></blockquote>

<p>This generated all the files we wanted.<br/>
Let&rsquo;s first edit the model to add the <strong>created_at</strong> and <strong>updated_at</strong> fields that are not present by default.<br/>
We can also add an index on the <strong>starred</strong> field because we will often be querying on it with a <code>where</code> clause for example (not in this application actually).</p>

<p>Your Post model should look like so</p>

<figure class='code'><figcaption><span>app/models/post.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Timestamps</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:body</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:starred</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="no">Boolean</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">index</span><span class="p">({</span> <span class="ss">starred</span><span class="p">:</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have a command to enforce indexes on the database</p>

<pre><code>rake db:mongoid:create_indexes
</code></pre>

<p>This will set an index on the <em>starred</em> field of the <em>post</em> collection.</p>

<blockquote><p>Quick tip: use <code>rake -T</code> to see a list a available tasks</p>

<p>Wait&hellip; we didn&rsquo;t create the database, did we? No we didn&rsquo;t, the database is automatically created.</p></blockquote>

<p>For some reason, Rails 4 uses the <code>update()</code> method by default to update an object in the corresponding controller action which does not behave as one could expect (and basically does not update
the document). This may be due to mongoid&hellip; Anyway, let&rsquo;s use <code>update_attributes()</code> instead.</p>

<p>In the recently created controller, change the <em>update</em> action to look like this one</p>

<figure class='code'><figcaption><span>app/controllers/posts_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># PATCH/PUT /posts/1</span>
</span><span class='line'><span class="c1"># PATCH/PUT /posts/1.json</span>
</span><span class='line'><span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@post</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="n">post_params</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="vi">@post</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s1">&#39;Post was successfully updated.&#39;</span> <span class="p">}</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">head</span> <span class="ss">:no_content</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">action</span><span class="p">:</span> <span class="s1">&#39;edit&#39;</span> <span class="p">}</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@post</span><span class="o">.</span><span class="n">errors</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="ss">:unprocessable_entity</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We actually do not need all the json stuff because we are not writing some sort of API but the <code>scaffold</code> command generates it for us.</p>

<p>Now if you navigate to <a href="http://localhost:3000/posts">http://localhost:3000/posts</a> you should be able to play with the posts. : )<br/>
Go ahead, create/update/destroy a few posts to see if everything is working as expected.</p>

<h2>Embedding documents</h2>

<blockquote><p>A collection can be compared to a table.<br/>
A document can be compared to a row.</p></blockquote>

<p>Here I&rsquo;ve decided to show you how to embed documents in each other because this is one of the features that you will probably wind up using the most.<br/>
In MongoDB you can associate two documents with &ldquo;foreign keys&rdquo; although the concept does not really exists. So you can still use the usual stuff: <code>has_many</code>, <code>belongs_to</code> and so on.<br/>
<strong>But</strong>, there is no <em>join</em> is MongoDB, loading one document and its associated document will therefore execute two queries.</p>

<p>However you can set another type of relation: you can embed one document into another. Loading the parent document will also load all the children documents at the same time.<br/>
<strong>But</strong>, it will always instanciate all of the objects retrieved even if you do not need the children, plus, each document has a size limit: 16MB, if you have too many child
documents, the parent document&rsquo;s size could exceed this limit.</p>

<blockquote><p>Foreign key = 2 queries<br/>
Embedding = loading many objects all the time + parent document size limited</p>

<p><a href="http://docs.mongodb.org/manual/reference/limits/">MongoDB limits</a></p></blockquote>

<p>We suppose that when we load a post, we also want all of its associated comments and that there will not be thousands of comments.<br/>
So embedding seems to be a good choice.</p>

<p>Here is a design example of a MongoDB database with users that have posts and posts that have comments.</p>

<p><strong>users collection</strong></p>

<pre><code>[
  {
    "_id": "5063114bd386d8fadbd6b004",
    "name": "John Snow"
  }
]
</code></pre>

<p><strong>posts collection</strong></p>

<pre><code>[
  {
    "_id": "6563521bd386d6dadbd6b002",
    "title": "Why King's Landing should belong to Daenerys",
    "user_id": "5063114bd386d8fadbd6b004",
    "comments": [
      {
        "_id": "4586521bd638d6dadbd7b003"
        "body": "I totally agree with you, great post!"
      },
      {
        "_id": "8526521bd654d6dadbd7b001"
        "body": "I'm so sad since Drogo died..."
      }
    ]
  }
]
</code></pre>

<p>This being said, let&rsquo;s get started, shall we?</p>

<pre><code>rails g scaffold comment body:string
</code></pre>

<p>Now that our Comment model is generated, we can edit it to reflect this</p>

<figure class='code'><figcaption><span>app/models/comment.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Comment</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Timestamps</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">embedded_in</span> <span class="ss">:post</span><span class="p">,</span> <span class="n">inverse_of</span><span class="p">:</span> <span class="ss">:comments</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:body</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This just tells MongoDB that comments are to be embedded in the corresponding post.<br/>
The <code>inverse_of</code> option is required in order to tell Mongoid what the comment should be embedded through.</p>

<p>We can edit the Post model to reflect that association and add the <code>embeds_many :comments</code> (line 5)</p>

<figure class='code'><figcaption><span>app/models/post.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Timestamps</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">embeds_many</span> <span class="ss">:comments</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:body</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:starred</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="no">Boolean</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">index</span><span class="p">({</span> <span class="ss">starred</span><span class="p">:</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to edit the <strong>routes</strong> file to make posts and comments nested resources.</p>

<figure class='code'><figcaption><span>config/routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:posts</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:comments</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates urls like <em>/posts/:post_id/comments</em>.</p>

<p>Now we have to change our <strong>comments_controller.rb</strong> and all our comments&rsquo;s views to reflect these nested resources: any comment we will be using now depends on a post.<br/>
Note: this part is not related to MongoDB or Mongoid. We would have gone through the same steps anyway with nested resources.</p>

<blockquote><p><a href="http://guides.rubyonrails.org/routing.html#nested-resources">Nested resources</a></p></blockquote>

<figure class='code'><figcaption><span>app/controllers/comments_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CommentsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:load_post</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:set_comment</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:show</span><span class="p">,</span> <span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># GET /comments</span>
</span><span class='line'>  <span class="c1"># GET /comments.json</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@comments</span> <span class="o">=</span> <span class="vi">@post</span><span class="o">.</span><span class="n">comments</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># GET /comments/1</span>
</span><span class='line'>  <span class="c1"># GET /comments/1.json</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># GET /comments/new</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="vi">@comment</span> <span class="o">=</span> <span class="vi">@post</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">build</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># GET /comments/1/edit</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">edit</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># POST /comments</span>
</span><span class='line'>  <span class="c1"># POST /comments.json</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@comment</span> <span class="o">=</span> <span class="vi">@post</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">comment_params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@comment</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="o">[</span><span class="vi">@post</span><span class="p">,</span> <span class="vi">@comment</span><span class="o">]</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s1">&#39;Comment was successfully created.&#39;</span> <span class="p">}</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">action</span><span class="p">:</span> <span class="s1">&#39;show&#39;</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="ss">:created</span><span class="p">,</span> <span class="ss">location</span><span class="p">:</span> <span class="vi">@comment</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">action</span><span class="p">:</span> <span class="s1">&#39;new&#39;</span> <span class="p">}</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@comment</span><span class="o">.</span><span class="n">errors</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="ss">:unprocessable_entity</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># PATCH/PUT /comments/1</span>
</span><span class='line'>  <span class="c1"># PATCH/PUT /comments/1.json</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@comment</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="n">comment_params</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="o">[</span><span class="vi">@post</span><span class="p">,</span> <span class="vi">@comment</span><span class="o">]</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s1">&#39;Comment was successfully updated.&#39;</span> <span class="p">}</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">head</span> <span class="ss">:no_content</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">action</span><span class="p">:</span> <span class="s1">&#39;edit&#39;</span> <span class="p">}</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@comment</span><span class="o">.</span><span class="n">errors</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="ss">:unprocessable_entity</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># DELETE /comments/1</span>
</span><span class='line'>  <span class="c1"># DELETE /comments/1.json</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="vi">@comment</span><span class="o">.</span><span class="n">destroy</span>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="n">post_comments_url</span><span class="p">(</span><span class="vi">@post</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">head</span> <span class="ss">:no_content</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>    <span class="c1"># Use callbacks to share common setup or constraints between actions.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">set_comment</span>
</span><span class='line'>      <span class="vi">@comment</span> <span class="o">=</span> <span class="vi">@post</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Never trust parameters from the scary internet, only allow the white list through.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">comment_params</span>
</span><span class='line'>      <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:comment</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:body</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">load_post</span>
</span><span class='line'>      <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>What changed? Well, now we use the post passed in params to load, create, redirect comments.<br/>
See the <strong>load_post</strong> method, this is the root of everything else. We load a post using the :post_id that is sent and then we use this post everywhere.</p>

<blockquote><p>Quick tip: issue a <code>rake routes</code> to see the routes you can use in the application</p></blockquote>

<p>Now we need to change these routes in all the view files.
Here I&rsquo;ll show you only the lines that have changed.</p>

<figure class='code'><figcaption><span>app/views/comments/index.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Show&#39;</span><span class="p">,</span> <span class="n">post_comment_path</span><span class="p">(</span><span class="vi">@post</span><span class="p">,</span> <span class="n">comment</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x">&lt;/td&gt;</span>
</span><span class='line'><span class="x">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Edit&#39;</span><span class="p">,</span> <span class="n">edit_post_comment_path</span><span class="p">(</span><span class="vi">@post</span><span class="p">,</span> <span class="n">comment</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x">&lt;/td&gt;</span>
</span><span class='line'><span class="x">&lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Destroy&#39;</span><span class="p">,</span> <span class="o">[</span><span class="vi">@post</span><span class="p">,</span> <span class="n">comment</span><span class="o">]</span><span class="p">,</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">confirm</span><span class="p">:</span> <span class="s1">&#39;Are you sure?&#39;</span> <span class="p">}</span> <span class="cp">%&gt;</span><span class="x">&lt;/td&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">...</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;New Comment&#39;</span><span class="p">,</span> <span class="n">new_post_comment_path</span><span class="p">(</span><span class="vi">@post</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/views/comments/_form.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">form_for</span><span class="p">(</span><span class="o">[</span><span class="vi">@post</span><span class="p">,</span> <span class="vi">@comment</span><span class="o">]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">...</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/views/comments/new.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">...</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Back&#39;</span><span class="p">,</span> <span class="n">post_comments_path</span><span class="p">(</span><span class="vi">@post</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/views/comments/show.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">...</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Edit&#39;</span><span class="p">,</span> <span class="n">edit_post_comment_path</span><span class="p">(</span><span class="vi">@post</span><span class="p">,</span> <span class="vi">@comment</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"> |</span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Back&#39;</span><span class="p">,</span> <span class="n">post_comments_path</span><span class="p">(</span><span class="vi">@post</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/views/comments/edit.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">...</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Show&#39;</span><span class="p">,</span> <span class="n">post_comment_path</span><span class="p">(</span><span class="vi">@post</span><span class="p">,</span> <span class="vi">@comment</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"> |</span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Back&#39;</span><span class="p">,</span> <span class="n">post_comments_path</span><span class="p">(</span><span class="vi">@post</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Now return in your running application and create a new post.<br/>
Click on the <em>show</em> link to view the post you just created and just append <em>comments</em> to the url, like so: <a href="http://localhost:3000/posts/:post_id/comments.">http://localhost:3000/posts/:post_id/comments.</a></p>

<p>That&rsquo;s it! You should now be able to create comments and manage them with all the basic usual actions.</p>

<p>I hope this little introduction to Rails 4 with Mongoid helped you.</p>

<p>See you around!</p>

<h3>Resources</h3>

<ul>
<li><a href="http://net.tutsplus.com/tutorials/why-you-should-use-rvm/">Why you should use RVM</a></li>
<li><a href="http://net.tutsplus.com/tutorials/ruby/digging-into-rails-4/">Digging into Rails 4</a></li>
<li><a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/">Install MongoDB on Ubuntu</a></li>
<li><a href="http://docs.mongodb.org/manual/reference/limits/">MongoDB limits</a></li>
<li><a href="http://mongoid.org/en/mongoid/docs/installation.html">Mongoid installation</a></li>
<li><a href="http://mongoid.org/en/mongoid/docs/documents.html#fields">Mongoid document field types</a></li>
<li><a href="http://mongoid.org/en/mongoid/docs/indexing.html">Indexing with Mongoid</a></li>
<li>If you don&rsquo;t know what are the new &ldquo;concerns&rdquo; folders in Rails 4: <a href="http://37signals.com/svn/posts/3372-put-chubby-models-on-a-diet-with-concerns">Put chubby models on a diet with concerns</a></li>
<li><a href="http://guides.rubyonrails.org/routing.html#nested-resources">Nested resources</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux command line Tips: Become a master]]></title>
    <link href="http://requiremind.com/linux-command-line-tips-become-a-master"/>
    <updated>2013-05-19T01:24:00+02:00</updated>
    <id>http://requiremind.com/linux-command-line-tips-become-a-master</id>
    <content type="html"><![CDATA[<p>You&rsquo;re using the command line from time to time and you want to go further? You&rsquo;re at the right place.<br/>
You&rsquo;re going to learn new tricks, use them and improve your skills with the command line.</p>

<p>Ready? Go ahead.</p>

<!-- more -->


<h3>Move in linux</h3>

<p><code>cd</code>, for Change Directory allows you to move easily and quickly across directories in your system.</p>

<blockquote><p>Ok Linux. I want to go to my pictures directory</p></blockquote>

<pre><code>cd ~/Pictures
</code></pre>

<blockquote><p>Ok, now I want to go back home</p></blockquote>

<pre><code>cd
</code></pre>

<blockquote><p>Good, and if I want to move up one directory</p></blockquote>

<pre><code>cd ..
</code></pre>

<blockquote><p>Nice. I want to return to the last directory I was before, possible?</p></blockquote>

<pre><code>cd -
</code></pre>

<blockquote><p>Awesome! Thanks.</p></blockquote>

<p>Don&rsquo;t forget to use the tab key <code>⇥</code> for auto-completion, it&rsquo;s very useful!</p>

<h3>History master</h3>

<p>You type many commands in your terminal, 10, then 100, then 100 000 000 &hellip;
You know that you&rsquo;ve typed a super-shinny-powerful command in the past but you can&rsquo;t remember what it was. You&rsquo;re going to discover how to find it back.</p>

<ul>
<li><p>Up Arrow Key</p>

<p>  To find the previous commands you&rsquo;ve typed, you can use the upper arrow key <code>↑</code> (multiple times) and it will show you the history. Press Enter <code>⏎</code> when you find what you want.</p></li>
<li><p>History</p>

<p>  A usefull command in linux is <code>history</code>, it allows you to see a list of commands you&rsquo;ve done previously.
  You can combine it with grep to find something specific.</p>

<pre><code>  history | grep "myarticle.txt"
</code></pre>

<p>  On the left of every commands listed in the history you can see a number. You can use it to execute a specific command.</p>

<pre><code>  ![number]
  !951      # execute the command number 951
</code></pre></li>
<li><p>Ctrl + R</p>

<p>  But if you want to be quicker you have to use <code>Ctrl + R</code>.
  It will display &ldquo;reverse-i-search&rdquo; and you can type any combination of letters. For example, &ldquo;myarticle&rdquo;.<br/>
  This will display a match of the most recent command in your history containing &ldquo;myarticle&rdquo;.
  When you find what you were looking for, press Enter <code>⏎</code> to execute the suggested command.</p></li>
<li><p>Exclamation point or &ldquo;bang&rdquo;</p>

<ul>
<li><p>&ldquo;bang bang&rdquo; command</p>

<blockquote><p>I&rsquo;ve typed a command that requires privileges but I&rsquo;ve forgot to use <code>sudo</code>.<br/>
  Any advice?</p></blockquote>

<p>  Enter <code>!!</code> (known as &ldquo;bang bang&rdquo;) to run the previous command.</p>

<pre><code>  apt-get update
  sudo !!         # will run sudo apt-get update
</code></pre></li>
<li><p>Exclamation point</p>

<blockquote><p>Ok, I have a super-awesome memory and I can remember every commands I&rsquo;ve typed. How can I run what I&rsquo;ve typed seven commands ago ?</p></blockquote>

<p>  Easy ! Use <code>!-[number]</code></p>

<pre><code>  !-7
</code></pre>

<blockquote><p>I want to find the last command that started with a specific text (e.g. &ldquo;ls&rdquo;)</p></blockquote>

<p>  Use <code>![expression]</code></p>

<pre><code>  !ls             # will run ls -la ~/Pictures
</code></pre>

<blockquote><p>I want to get the previous command without the first word</p></blockquote>

<p>  Use <code>!*</code></p>

<pre><code>  cp article.txt ./blog/article.txt
  mv !*         # will run mv article.txt ./blog/article.txt
</code></pre>

<blockquote><p>I want to get the first argument of the previous command</p></blockquote>

<p>  Use <code>!^</code></p>

<pre><code>  cp article.txt ./blog/article.txt
  nano !^         # will run nano article.txt
</code></pre>

<blockquote><p>I want to get the last argument of the previous command</p></blockquote>

<p>  Use <code>!$</code></p>

<pre><code>  cp article.txt ./blog/article.txt
  nano !$         # will run nano ./blog/article.txt
</code></pre>

<p>  To go a little bit further you can use all the previous commands with the following syntax:</p>

<p>  <code>[command]:p</code> : It prints out the command instead of running it</p>

<pre><code>  !!:p             # prints (but don't execute) nano my-so-long-file-name.txt
</code></pre></li>
</ul>
</li>
</ul>


<blockquote><p>I&rsquo;ve seen that the history keeps only my 1000 previous commands. How to (de|in)crease this limit ?</p></blockquote>

<p>You can change this limit in your <code>~/.bashrc</code>. Look at the line with <code>HISTSIZE=1000</code> and update it to fit your needs.</p>

<p>If you&rsquo;ve written some bad or shameful things in your history you can simply erase it with</p>

<pre><code>history -c
</code></pre>

<h3>Play with jobs</h3>

<p>When you execute a script or a command that can take a long time to execute, you can run it as a background job.</p>

<p>Run a process in background by appending an ampersand <code>&amp;</code></p>

<pre><code>node server.js &amp;
</code></pre>

<blockquote><p>Wait, wait! I forgot to add the ampersand. I need to kill the process, right?</p></blockquote>

<p>The answer is : No. You can put the current job to the background without having to kill it.</p>

<p>To do so, you need <code>Ctrl + Z</code> to suspend the current job.<br/>
Then, <code>bg</code> to run it in background.</p>

<blockquote><p>Ok fine, my job is working in the background but how do I see it ?</p></blockquote>

<p>Simple you can use,</p>

<pre><code>jobs
</code></pre>

<p>Or</p>

<pre><code>ps
</code></pre>

<p>It displays a list of the processes you&rsquo;ve launched.</p>

<p>If you want to bring a specific job back to the foreground (because you&rsquo;re nice), simply use <code>fg</code>.</p>

<pre><code>fg %[job-number]

fg %2
</code></pre>

<p>But if you are less emotional then you can kill it without scruples, just use <code>kill</code>.</p>

<p>If you&rsquo;ve choosen to use <code>jobs</code>, you can kill a process by is job-number in the list.</p>

<pre><code>kill %[job-number]

kill %2
</code></pre>

<p>If you&rsquo;ve choosen to use <code>ps</code>, you can kill a process by is process id (PID).</p>

<pre><code>kill [PID]

kill 1293
</code></pre>

<p>To kill the current process you can also use <code>Ctrl + C</code></p>

<h3>Do two things (or more) at once</h3>

<p>There is three main differents ways to accomplish that.</p>

<p>1 &ndash; use a semicolon <code>;</code></p>

<p>It will execute the command regardless of the result of the previous one.</p>

<pre><code>./doSomething.sh ; ./doSomethingElseNoMatterWhatHappened.sh
</code></pre>

<p>2 &ndash; use a double ampersand <code>&amp;&amp;</code></p>

<p>If you want the second command to be executed only if the first exited with no errors.</p>

<pre><code>git clone git@github.com:requiremind/requiremind.github.io.git requiremind &amp;&amp; cd requiremind
</code></pre>

<p>3 &ndash; use <code>||</code></p>

<p>It will execute the second command only if the first failed</p>

<pre><code>./testNuclearWeapon.sh || echo "Hum.. Sorry. Everything is out of control.."
</code></pre>

<h3>Shortcuts</h3>

<blockquote><p>I&rsquo;m writing a command and suddenly I realize that this isn&rsquo;t what I wanted to type or I&rsquo;ve made a typo in the first word. What do I do now?</p></blockquote>

<p>So this is what you usually do (based on my case):</p>

<ul>
<li>Press Shift key <code>⇧</code> and top key <code>↖</code>: you&rsquo;re in a terminal, this isn&rsquo;t working..</li>
<li>Press the erase key <code>⌫</code> to the left of the line: works, but this is boring..</li>
</ul>


<p>No more wasted time ! Now you can use <code>Ctrl + U</code>. <br/>
Simple, easy, perfect !</p>

<p>And if you want to just erase word by word, you can use <code>Ctrl + W</code>.</p>

<p>To remove all the line to the right of the cursor position, use <code>Ctrl + K</code> (and <code>Ctrl + Y</code> to revert if this was a terrible mistake).</p>

<p>To simplify your navigation you can use <code>Ctrl + A</code> and <code>Ctrl + E</code> to go respectively to the beginning and to the end of the current line.</p>

<h3>Define some alias</h3>

<p>Sometimes you&rsquo;re going to face a hard-bad-long-painful-forgettable command. Unless you love the pain to type over and over again the same command, you can use <code>alias</code>. The syntax to define one is:</p>

<pre><code>alias [alias-name]=[command]
</code></pre>

<p>If you want your alias to persist across different sessions (close the terminal, reboot, ..) you have to add it to your <code>~/.bashrc</code>. So open your bashrc file and look for the <code>#some more aliases</code> section. Below this, type all your aliases. For example:</p>

<pre><code>alias ai='sudo apt-get install'
alias au='sudo apt-get update'
</code></pre>

<p>Save your file. And you&rsquo;re done! Time saved.</p>

<h3>The end</h3>

<p>Ok, now you&rsquo;ve seen a lot of useful command line tips. Learn them, use them and enjoy them. Take your time and once you&rsquo;re done, use <code>exit</code> or <code>Ctrl + D</code> to close the console and enjoy real life !</p>

<pre><code>exit
</code></pre>

<p>Later on this blog will come another article based on <code>zsh</code> and <code>oh-my-zsh</code> to go even further and be more effective.</p>

<p>For informations, this article is based on a bash shell running on Ubuntu. It may be possible that some commands used here doesn&rsquo;t work on your own shell/OS.</p>

<p>If you&rsquo;re on Twitter and you want to follow funny accounts about Linux commands I recommend :</p>

<ul>
<li><a href="http://twitter.com/climagic">@climagic</a></li>
<li><a href="http://twitter.com/unixtooltip">@UnixToolTip</a></li>
</ul>


<p>And don&rsquo;t forget to follow us too <a href="http:///twitter.com/requiremind">@requiremind</a></p>
]]></content>
  </entry>
  
</feed>
